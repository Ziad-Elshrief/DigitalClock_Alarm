
digitalClock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b80  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002d14  08002d14  00012d14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d24  08002d24  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08002d24  08002d24  00012d24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002d2c  08002d2c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d2c  08002d2c  00012d2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d30  08002d30  00012d30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08002d34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  20000010  08002d44  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000080  08002d44  00020080  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008f6a  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001aed  00000000  00000000  00028fed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a60  00000000  00000000  0002aae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007f1  00000000  00000000  0002b540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001588d  00000000  00000000  0002bd31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c81f  00000000  00000000  000415be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008787d  00000000  00000000  0004dddd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000029f8  00000000  00000000  000d565c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  000d8054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000010 	.word	0x20000010
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002cfc 	.word	0x08002cfc

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000014 	.word	0x20000014
 80001d0:	08002cfc 	.word	0x08002cfc

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b970 	b.w	80004cc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	460d      	mov	r5, r1
 800020c:	4604      	mov	r4, r0
 800020e:	460f      	mov	r7, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4694      	mov	ip, r2
 8000218:	d965      	bls.n	80002e6 <__udivmoddi4+0xe2>
 800021a:	fab2 f382 	clz	r3, r2
 800021e:	b143      	cbz	r3, 8000232 <__udivmoddi4+0x2e>
 8000220:	fa02 fc03 	lsl.w	ip, r2, r3
 8000224:	f1c3 0220 	rsb	r2, r3, #32
 8000228:	409f      	lsls	r7, r3
 800022a:	fa20 f202 	lsr.w	r2, r0, r2
 800022e:	4317      	orrs	r7, r2
 8000230:	409c      	lsls	r4, r3
 8000232:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000236:	fa1f f58c 	uxth.w	r5, ip
 800023a:	fbb7 f1fe 	udiv	r1, r7, lr
 800023e:	0c22      	lsrs	r2, r4, #16
 8000240:	fb0e 7711 	mls	r7, lr, r1, r7
 8000244:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000248:	fb01 f005 	mul.w	r0, r1, r5
 800024c:	4290      	cmp	r0, r2
 800024e:	d90a      	bls.n	8000266 <__udivmoddi4+0x62>
 8000250:	eb1c 0202 	adds.w	r2, ip, r2
 8000254:	f101 37ff 	add.w	r7, r1, #4294967295
 8000258:	f080 811c 	bcs.w	8000494 <__udivmoddi4+0x290>
 800025c:	4290      	cmp	r0, r2
 800025e:	f240 8119 	bls.w	8000494 <__udivmoddi4+0x290>
 8000262:	3902      	subs	r1, #2
 8000264:	4462      	add	r2, ip
 8000266:	1a12      	subs	r2, r2, r0
 8000268:	b2a4      	uxth	r4, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000276:	fb00 f505 	mul.w	r5, r0, r5
 800027a:	42a5      	cmp	r5, r4
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x90>
 800027e:	eb1c 0404 	adds.w	r4, ip, r4
 8000282:	f100 32ff 	add.w	r2, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x294>
 800028a:	42a5      	cmp	r5, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x294>
 8000290:	4464      	add	r4, ip
 8000292:	3802      	subs	r0, #2
 8000294:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000298:	1b64      	subs	r4, r4, r5
 800029a:	2100      	movs	r1, #0
 800029c:	b11e      	cbz	r6, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40dc      	lsrs	r4, r3
 80002a0:	2300      	movs	r3, #0
 80002a2:	e9c6 4300 	strd	r4, r3, [r6]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d908      	bls.n	80002c0 <__udivmoddi4+0xbc>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80ed 	beq.w	800048e <__udivmoddi4+0x28a>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	d149      	bne.n	800035c <__udivmoddi4+0x158>
 80002c8:	42ab      	cmp	r3, r5
 80002ca:	d302      	bcc.n	80002d2 <__udivmoddi4+0xce>
 80002cc:	4282      	cmp	r2, r0
 80002ce:	f200 80f8 	bhi.w	80004c2 <__udivmoddi4+0x2be>
 80002d2:	1a84      	subs	r4, r0, r2
 80002d4:	eb65 0203 	sbc.w	r2, r5, r3
 80002d8:	2001      	movs	r0, #1
 80002da:	4617      	mov	r7, r2
 80002dc:	2e00      	cmp	r6, #0
 80002de:	d0e2      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	e9c6 4700 	strd	r4, r7, [r6]
 80002e4:	e7df      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xe6>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f382 	clz	r3, r2
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2101      	movs	r1, #1
 8000300:	fbb2 f5f7 	udiv	r5, r2, r7
 8000304:	fb07 2015 	mls	r0, r7, r5, r2
 8000308:	0c22      	lsrs	r2, r4, #16
 800030a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030e:	fb0e f005 	mul.w	r0, lr, r5
 8000312:	4290      	cmp	r0, r2
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x124>
 8000316:	eb1c 0202 	adds.w	r2, ip, r2
 800031a:	f105 38ff 	add.w	r8, r5, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4290      	cmp	r0, r2
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2b8>
 8000326:	4645      	mov	r5, r8
 8000328:	1a12      	subs	r2, r2, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000330:	fb07 2210 	mls	r2, r7, r0, r2
 8000334:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x14e>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 32ff 	add.w	r2, r0, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x14c>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2c2>
 8000350:	4610      	mov	r0, r2
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035a:	e79f      	b.n	800029c <__udivmoddi4+0x98>
 800035c:	f1c1 0720 	rsb	r7, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa05 f401 	lsl.w	r4, r5, r1
 800036e:	fa20 f307 	lsr.w	r3, r0, r7
 8000372:	40fd      	lsrs	r5, r7
 8000374:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000378:	4323      	orrs	r3, r4
 800037a:	fbb5 f8f9 	udiv	r8, r5, r9
 800037e:	fa1f fe8c 	uxth.w	lr, ip
 8000382:	fb09 5518 	mls	r5, r9, r8, r5
 8000386:	0c1c      	lsrs	r4, r3, #16
 8000388:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800038c:	fb08 f50e 	mul.w	r5, r8, lr
 8000390:	42a5      	cmp	r5, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	fa00 f001 	lsl.w	r0, r0, r1
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2b4>
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2b4>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4464      	add	r4, ip
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	b29d      	uxth	r5, r3
 80003b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003bc:	fb09 4413 	mls	r4, r9, r3, r4
 80003c0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c8:	45a6      	cmp	lr, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2ac>
 80003d6:	45a6      	cmp	lr, r4
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2ac>
 80003da:	3b02      	subs	r3, #2
 80003dc:	4464      	add	r4, ip
 80003de:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e2:	fba3 9502 	umull	r9, r5, r3, r2
 80003e6:	eba4 040e 	sub.w	r4, r4, lr
 80003ea:	42ac      	cmp	r4, r5
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46ae      	mov	lr, r5
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x29c>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x298>
 80003f4:	b156      	cbz	r6, 800040c <__udivmoddi4+0x208>
 80003f6:	ebb0 0208 	subs.w	r2, r0, r8
 80003fa:	eb64 040e 	sbc.w	r4, r4, lr
 80003fe:	fa04 f707 	lsl.w	r7, r4, r7
 8000402:	40ca      	lsrs	r2, r1
 8000404:	40cc      	lsrs	r4, r1
 8000406:	4317      	orrs	r7, r2
 8000408:	e9c6 7400 	strd	r7, r4, [r6]
 800040c:	4618      	mov	r0, r3
 800040e:	2100      	movs	r1, #0
 8000410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000414:	f1c3 0120 	rsb	r1, r3, #32
 8000418:	fa02 fc03 	lsl.w	ip, r2, r3
 800041c:	fa20 f201 	lsr.w	r2, r0, r1
 8000420:	fa25 f101 	lsr.w	r1, r5, r1
 8000424:	409d      	lsls	r5, r3
 8000426:	432a      	orrs	r2, r5
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1510 	mls	r5, r7, r0, r1
 8000438:	0c11      	lsrs	r1, r2, #16
 800043a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043e:	fb00 f50e 	mul.w	r5, r0, lr
 8000442:	428d      	cmp	r5, r1
 8000444:	fa04 f403 	lsl.w	r4, r4, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x258>
 800044a:	eb1c 0101 	adds.w	r1, ip, r1
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000454:	428d      	cmp	r5, r1
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 8000458:	3802      	subs	r0, #2
 800045a:	4461      	add	r1, ip
 800045c:	1b49      	subs	r1, r1, r5
 800045e:	b292      	uxth	r2, r2
 8000460:	fbb1 f5f7 	udiv	r5, r1, r7
 8000464:	fb07 1115 	mls	r1, r7, r5, r1
 8000468:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800046c:	fb05 f10e 	mul.w	r1, r5, lr
 8000470:	4291      	cmp	r1, r2
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x282>
 8000474:	eb1c 0202 	adds.w	r2, ip, r2
 8000478:	f105 38ff 	add.w	r8, r5, #4294967295
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800047e:	4291      	cmp	r1, r2
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2a8>
 8000482:	3d02      	subs	r5, #2
 8000484:	4462      	add	r2, ip
 8000486:	1a52      	subs	r2, r2, r1
 8000488:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0xfc>
 800048e:	4631      	mov	r1, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e708      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000494:	4639      	mov	r1, r7
 8000496:	e6e6      	b.n	8000266 <__udivmoddi4+0x62>
 8000498:	4610      	mov	r0, r2
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x90>
 800049c:	4548      	cmp	r0, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a8:	3b01      	subs	r3, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004ac:	4645      	mov	r5, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x282>
 80004b0:	462b      	mov	r3, r5
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1da>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x258>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004bc:	3d02      	subs	r5, #2
 80004be:	4462      	add	r2, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x124>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e70a      	b.n	80002dc <__udivmoddi4+0xd8>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x14e>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <Alarm_Ring>:
/**
 * @brief if it's time to ring -> turn on buzzer
 *        gets called by Systick
 * 
 */
void Alarm_Ring(){
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
	if(Clock_compareTime(G_u8AlarmHours,G_u8AlarmMins)){
 80004d4:	4b0a      	ldr	r3, [pc, #40]	; (8000500 <Alarm_Ring+0x30>)
 80004d6:	781b      	ldrb	r3, [r3, #0]
 80004d8:	4a0a      	ldr	r2, [pc, #40]	; (8000504 <Alarm_Ring+0x34>)
 80004da:	7812      	ldrb	r2, [r2, #0]
 80004dc:	4611      	mov	r1, r2
 80004de:	4618      	mov	r0, r3
 80004e0:	f000 fd5a 	bl	8000f98 <Clock_compareTime>
 80004e4:	4603      	mov	r3, r0
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d007      	beq.n	80004fa <Alarm_Ring+0x2a>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80004ea:	2201      	movs	r2, #1
 80004ec:	2101      	movs	r1, #1
 80004ee:	4806      	ldr	r0, [pc, #24]	; (8000508 <Alarm_Ring+0x38>)
 80004f0:	f001 fc94 	bl	8001e1c <HAL_GPIO_WritePin>
		G_u8AlarmRinging=1;
 80004f4:	4b05      	ldr	r3, [pc, #20]	; (800050c <Alarm_Ring+0x3c>)
 80004f6:	2201      	movs	r2, #1
 80004f8:	701a      	strb	r2, [r3, #0]
	}
}
 80004fa:	bf00      	nop
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	2000002d 	.word	0x2000002d
 8000504:	2000002c 	.word	0x2000002c
 8000508:	40020400 	.word	0x40020400
 800050c:	2000002f 	.word	0x2000002f

08000510 <Alarm_Snooze>:

/**
 * @brief snoozes the alarm for 5 minutes if the alarm is ringing
 * 
 */
void Alarm_Snooze(){
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
	/** wait for debounce **/
	HDELAY_delay_ms(30);
 8000514:	201e      	movs	r0, #30
 8000516:	f000 fd77 	bl	8001008 <HDELAY_delay_ms>
	if(G_u8AlarmRinging){
 800051a:	4b14      	ldr	r3, [pc, #80]	; (800056c <Alarm_Snooze+0x5c>)
 800051c:	781b      	ldrb	r3, [r3, #0]
 800051e:	2b00      	cmp	r3, #0
 8000520:	d021      	beq.n	8000566 <Alarm_Snooze+0x56>
		/** turn off alarm buzzer **/
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000522:	2200      	movs	r2, #0
 8000524:	2101      	movs	r1, #1
 8000526:	4812      	ldr	r0, [pc, #72]	; (8000570 <Alarm_Snooze+0x60>)
 8000528:	f001 fc78 	bl	8001e1c <HAL_GPIO_WritePin>
		G_u8AlarmMins+=5;
 800052c:	4b11      	ldr	r3, [pc, #68]	; (8000574 <Alarm_Snooze+0x64>)
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	3305      	adds	r3, #5
 8000532:	b2da      	uxtb	r2, r3
 8000534:	4b0f      	ldr	r3, [pc, #60]	; (8000574 <Alarm_Snooze+0x64>)
 8000536:	701a      	strb	r2, [r3, #0]
		if(G_u8AlarmMins>59){
 8000538:	4b0e      	ldr	r3, [pc, #56]	; (8000574 <Alarm_Snooze+0x64>)
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	2b3b      	cmp	r3, #59	; 0x3b
 800053e:	d912      	bls.n	8000566 <Alarm_Snooze+0x56>
			G_u8AlarmMins=G_u8AlarmMins-59;
 8000540:	4b0c      	ldr	r3, [pc, #48]	; (8000574 <Alarm_Snooze+0x64>)
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	3b3b      	subs	r3, #59	; 0x3b
 8000546:	b2da      	uxtb	r2, r3
 8000548:	4b0a      	ldr	r3, [pc, #40]	; (8000574 <Alarm_Snooze+0x64>)
 800054a:	701a      	strb	r2, [r3, #0]
			G_u8AlarmHours++;
 800054c:	4b0a      	ldr	r3, [pc, #40]	; (8000578 <Alarm_Snooze+0x68>)
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	3301      	adds	r3, #1
 8000552:	b2da      	uxtb	r2, r3
 8000554:	4b08      	ldr	r3, [pc, #32]	; (8000578 <Alarm_Snooze+0x68>)
 8000556:	701a      	strb	r2, [r3, #0]
			if(G_u8AlarmHours>23){
 8000558:	4b07      	ldr	r3, [pc, #28]	; (8000578 <Alarm_Snooze+0x68>)
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	2b17      	cmp	r3, #23
 800055e:	d902      	bls.n	8000566 <Alarm_Snooze+0x56>
				G_u8AlarmHours=0;
 8000560:	4b05      	ldr	r3, [pc, #20]	; (8000578 <Alarm_Snooze+0x68>)
 8000562:	2200      	movs	r2, #0
 8000564:	701a      	strb	r2, [r3, #0]
			}
		}
	}
}
 8000566:	bf00      	nop
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	2000002f 	.word	0x2000002f
 8000570:	40020400 	.word	0x40020400
 8000574:	2000002c 	.word	0x2000002c
 8000578:	2000002d 	.word	0x2000002d

0800057c <Alarm_Stop>:

/**
 * @brief stops the alarm from ringing if the alarm is ringing
 * 
 */
void Alarm_Stop(){
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
	/** wait for debounce **/
	HDELAY_delay_ms(30);
 8000580:	201e      	movs	r0, #30
 8000582:	f000 fd41 	bl	8001008 <HDELAY_delay_ms>
	if(G_u8AlarmRinging){
 8000586:	4b09      	ldr	r3, [pc, #36]	; (80005ac <Alarm_Stop+0x30>)
 8000588:	781b      	ldrb	r3, [r3, #0]
 800058a:	2b00      	cmp	r3, #0
 800058c:	d00c      	beq.n	80005a8 <Alarm_Stop+0x2c>
		/** Turn off alarm buzzer **/
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800058e:	2200      	movs	r2, #0
 8000590:	2101      	movs	r1, #1
 8000592:	4807      	ldr	r0, [pc, #28]	; (80005b0 <Alarm_Stop+0x34>)
 8000594:	f001 fc42 	bl	8001e1c <HAL_GPIO_WritePin>
		/**set alarm state to off **/
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000598:	2200      	movs	r2, #0
 800059a:	2102      	movs	r1, #2
 800059c:	4804      	ldr	r0, [pc, #16]	; (80005b0 <Alarm_Stop+0x34>)
 800059e:	f001 fc3d 	bl	8001e1c <HAL_GPIO_WritePin>
		G_u8AlarmON=0;
 80005a2:	4b04      	ldr	r3, [pc, #16]	; (80005b4 <Alarm_Stop+0x38>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	701a      	strb	r2, [r3, #0]
	}
}
 80005a8:	bf00      	nop
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	2000002f 	.word	0x2000002f
 80005b0:	40020400 	.word	0x40020400
 80005b4:	2000002e 	.word	0x2000002e

080005b8 <Alarm_ON_OFF>:

/**
 * @brief toggles the alarm state On/OFF
 * 
 */
void Alarm_ON_OFF(){
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
	/** wait for debounce **/
	HDELAY_delay_ms(30);
 80005bc:	201e      	movs	r0, #30
 80005be:	f000 fd23 	bl	8001008 <HDELAY_delay_ms>
	/** Toggle Alarm indicator and alarm state **/
	G_u8AlarmON=!G_u8AlarmON;
 80005c2:	4b09      	ldr	r3, [pc, #36]	; (80005e8 <Alarm_ON_OFF+0x30>)
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	bf0c      	ite	eq
 80005ca:	2301      	moveq	r3, #1
 80005cc:	2300      	movne	r3, #0
 80005ce:	b2db      	uxtb	r3, r3
 80005d0:	461a      	mov	r2, r3
 80005d2:	4b05      	ldr	r3, [pc, #20]	; (80005e8 <Alarm_ON_OFF+0x30>)
 80005d4:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, G_u8AlarmON);
 80005d6:	4b04      	ldr	r3, [pc, #16]	; (80005e8 <Alarm_ON_OFF+0x30>)
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	461a      	mov	r2, r3
 80005dc:	2102      	movs	r1, #2
 80005de:	4803      	ldr	r0, [pc, #12]	; (80005ec <Alarm_ON_OFF+0x34>)
 80005e0:	f001 fc1c 	bl	8001e1c <HAL_GPIO_WritePin>
}
 80005e4:	bf00      	nop
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	2000002e 	.word	0x2000002e
 80005ec:	40020400 	.word	0x40020400

080005f0 <Alaram_setAlarm>:
 * right 		:to move the cursor to the right
 * left			:to move the cursor to the left
 * cancel 		:to cancel setting the alarm and redisplay the clock
 * set alarm 	:to set the global alarm variables and redisplay the clock
 */
void Alaram_setAlarm(){
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b084      	sub	sp, #16
 80005f4:	af00      	add	r7, sp, #0
	/** wait for debounce **/
	HDELAY_delay_ms(30);
 80005f6:	201e      	movs	r0, #30
 80005f8:	f000 fd06 	bl	8001008 <HDELAY_delay_ms>
	/** Cursor positions without the ':' **/
	u8 L_u8Cursor[4]={0,1,3,4};
 80005fc:	4bb2      	ldr	r3, [pc, #712]	; (80008c8 <Alaram_setAlarm+0x2d8>)
 80005fe:	60bb      	str	r3, [r7, #8]
	s8 L_s8CursorPos=0;
 8000600:	2300      	movs	r3, #0
 8000602:	73fb      	strb	r3, [r7, #15]

	u8 L_u8Time[4]={G_u8AlarmHours/10,G_u8AlarmHours%10,G_u8AlarmMins/10,G_u8AlarmMins%10};
 8000604:	4bb1      	ldr	r3, [pc, #708]	; (80008cc <Alaram_setAlarm+0x2dc>)
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	4ab1      	ldr	r2, [pc, #708]	; (80008d0 <Alaram_setAlarm+0x2e0>)
 800060a:	fba2 2303 	umull	r2, r3, r2, r3
 800060e:	08db      	lsrs	r3, r3, #3
 8000610:	b2db      	uxtb	r3, r3
 8000612:	713b      	strb	r3, [r7, #4]
 8000614:	4bad      	ldr	r3, [pc, #692]	; (80008cc <Alaram_setAlarm+0x2dc>)
 8000616:	781a      	ldrb	r2, [r3, #0]
 8000618:	4bad      	ldr	r3, [pc, #692]	; (80008d0 <Alaram_setAlarm+0x2e0>)
 800061a:	fba3 1302 	umull	r1, r3, r3, r2
 800061e:	08d9      	lsrs	r1, r3, #3
 8000620:	460b      	mov	r3, r1
 8000622:	009b      	lsls	r3, r3, #2
 8000624:	440b      	add	r3, r1
 8000626:	005b      	lsls	r3, r3, #1
 8000628:	1ad3      	subs	r3, r2, r3
 800062a:	b2db      	uxtb	r3, r3
 800062c:	717b      	strb	r3, [r7, #5]
 800062e:	4ba9      	ldr	r3, [pc, #676]	; (80008d4 <Alaram_setAlarm+0x2e4>)
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	4aa7      	ldr	r2, [pc, #668]	; (80008d0 <Alaram_setAlarm+0x2e0>)
 8000634:	fba2 2303 	umull	r2, r3, r2, r3
 8000638:	08db      	lsrs	r3, r3, #3
 800063a:	b2db      	uxtb	r3, r3
 800063c:	71bb      	strb	r3, [r7, #6]
 800063e:	4ba5      	ldr	r3, [pc, #660]	; (80008d4 <Alaram_setAlarm+0x2e4>)
 8000640:	781a      	ldrb	r2, [r3, #0]
 8000642:	4ba3      	ldr	r3, [pc, #652]	; (80008d0 <Alaram_setAlarm+0x2e0>)
 8000644:	fba3 1302 	umull	r1, r3, r3, r2
 8000648:	08d9      	lsrs	r1, r3, #3
 800064a:	460b      	mov	r3, r1
 800064c:	009b      	lsls	r3, r3, #2
 800064e:	440b      	add	r3, r1
 8000650:	005b      	lsls	r3, r3, #1
 8000652:	1ad3      	subs	r3, r2, r3
 8000654:	b2db      	uxtb	r3, r3
 8000656:	71fb      	strb	r3, [r7, #7]
	G_u8DisaplayFlag=0;
 8000658:	4b9f      	ldr	r3, [pc, #636]	; (80008d8 <Alaram_setAlarm+0x2e8>)
 800065a:	2200      	movs	r2, #0
 800065c:	701a      	strb	r2, [r3, #0]
	/** set setting clock display to only hours and minutes **/
	HLCD_u8ClearDisplay();
 800065e:	f000 fe7f 	bl	8001360 <HLCD_u8ClearDisplay>
	HLCD_u8SetCursor(0);
 8000662:	2000      	movs	r0, #0
 8000664:	f000 fe0a 	bl	800127c <HLCD_u8SetCursor>
	HLCD_u8SendNumber(L_u8Time[0]);
 8000668:	793b      	ldrb	r3, [r7, #4]
 800066a:	b29b      	uxth	r3, r3
 800066c:	4618      	mov	r0, r3
 800066e:	f000 fe1b 	bl	80012a8 <HLCD_u8SendNumber>
	HLCD_u8SendNumber(L_u8Time[1]);
 8000672:	797b      	ldrb	r3, [r7, #5]
 8000674:	b29b      	uxth	r3, r3
 8000676:	4618      	mov	r0, r3
 8000678:	f000 fe16 	bl	80012a8 <HLCD_u8SendNumber>
	HLCD_u8SendChar(':');
 800067c:	203a      	movs	r0, #58	; 0x3a
 800067e:	f000 fd7d 	bl	800117c <HLCD_u8SendChar>
	HLCD_u8SendNumber(L_u8Time[2]);
 8000682:	79bb      	ldrb	r3, [r7, #6]
 8000684:	b29b      	uxth	r3, r3
 8000686:	4618      	mov	r0, r3
 8000688:	f000 fe0e 	bl	80012a8 <HLCD_u8SendNumber>
	HLCD_u8SendNumber(L_u8Time[3]);
 800068c:	79fb      	ldrb	r3, [r7, #7]
 800068e:	b29b      	uxth	r3, r3
 8000690:	4618      	mov	r0, r3
 8000692:	f000 fe09 	bl	80012a8 <HLCD_u8SendNumber>
	HLCD_u8SetCursor(0);
 8000696:	2000      	movs	r0, #0
 8000698:	f000 fdf0 	bl	800127c <HLCD_u8SetCursor>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8)!=0){
 800069c:	e169      	b.n	8000972 <Alaram_setAlarm+0x382>
		/** UP **/
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4)==0){
 800069e:	2110      	movs	r1, #16
 80006a0:	488e      	ldr	r0, [pc, #568]	; (80008dc <Alaram_setAlarm+0x2ec>)
 80006a2:	f001 fba3 	bl	8001dec <HAL_GPIO_ReadPin>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d175      	bne.n	8000798 <Alaram_setAlarm+0x1a8>
			L_u8Time[L_s8CursorPos]++;
 80006ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006b0:	f103 0210 	add.w	r2, r3, #16
 80006b4:	443a      	add	r2, r7
 80006b6:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80006ba:	3201      	adds	r2, #1
 80006bc:	b2d2      	uxtb	r2, r2
 80006be:	3310      	adds	r3, #16
 80006c0:	443b      	add	r3, r7
 80006c2:	f803 2c0c 	strb.w	r2, [r3, #-12]
			switch(L_s8CursorPos){
 80006c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006ca:	2b03      	cmp	r3, #3
 80006cc:	d84d      	bhi.n	800076a <Alaram_setAlarm+0x17a>
 80006ce:	a201      	add	r2, pc, #4	; (adr r2, 80006d4 <Alaram_setAlarm+0xe4>)
 80006d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006d4:	080006e5 	.word	0x080006e5
 80006d8:	08000727 	.word	0x08000727
 80006dc:	08000745 	.word	0x08000745
 80006e0:	08000751 	.word	0x08000751
			case 0:
				if(L_u8Time[0]==3) L_u8Time[0]=0;
 80006e4:	793b      	ldrb	r3, [r7, #4]
 80006e6:	2b03      	cmp	r3, #3
 80006e8:	d102      	bne.n	80006f0 <Alaram_setAlarm+0x100>
 80006ea:	2300      	movs	r3, #0
 80006ec:	713b      	strb	r3, [r7, #4]
					L_u8Time[1]=3;
					HLCD_u8SetCursor(L_u8Cursor[1]);
					HLCD_u8SendNumber(L_u8Time[1]);
					HLCD_u8SetCursor(L_u8Cursor[L_s8CursorPos]);
				}
				break;
 80006ee:	e035      	b.n	800075c <Alaram_setAlarm+0x16c>
				else if(L_u8Time[0]==2 && L_u8Time[1]>=4){
 80006f0:	793b      	ldrb	r3, [r7, #4]
 80006f2:	2b02      	cmp	r3, #2
 80006f4:	d132      	bne.n	800075c <Alaram_setAlarm+0x16c>
 80006f6:	797b      	ldrb	r3, [r7, #5]
 80006f8:	2b03      	cmp	r3, #3
 80006fa:	d92f      	bls.n	800075c <Alaram_setAlarm+0x16c>
					L_u8Time[1]=3;
 80006fc:	2303      	movs	r3, #3
 80006fe:	717b      	strb	r3, [r7, #5]
					HLCD_u8SetCursor(L_u8Cursor[1]);
 8000700:	7a7b      	ldrb	r3, [r7, #9]
 8000702:	4618      	mov	r0, r3
 8000704:	f000 fdba 	bl	800127c <HLCD_u8SetCursor>
					HLCD_u8SendNumber(L_u8Time[1]);
 8000708:	797b      	ldrb	r3, [r7, #5]
 800070a:	b29b      	uxth	r3, r3
 800070c:	4618      	mov	r0, r3
 800070e:	f000 fdcb 	bl	80012a8 <HLCD_u8SendNumber>
					HLCD_u8SetCursor(L_u8Cursor[L_s8CursorPos]);
 8000712:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000716:	3310      	adds	r3, #16
 8000718:	443b      	add	r3, r7
 800071a:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 800071e:	4618      	mov	r0, r3
 8000720:	f000 fdac 	bl	800127c <HLCD_u8SetCursor>
				break;
 8000724:	e01a      	b.n	800075c <Alaram_setAlarm+0x16c>
			case 1:
				if(L_u8Time[0]<2){
 8000726:	793b      	ldrb	r3, [r7, #4]
 8000728:	2b01      	cmp	r3, #1
 800072a:	d805      	bhi.n	8000738 <Alaram_setAlarm+0x148>
					if(L_u8Time[1]==10) L_u8Time[1]=0;
 800072c:	797b      	ldrb	r3, [r7, #5]
 800072e:	2b0a      	cmp	r3, #10
 8000730:	d116      	bne.n	8000760 <Alaram_setAlarm+0x170>
 8000732:	2300      	movs	r3, #0
 8000734:	717b      	strb	r3, [r7, #5]
				}else{
					if(L_u8Time[1]>=4) L_u8Time[1]=0;
				}
			break;
 8000736:	e013      	b.n	8000760 <Alaram_setAlarm+0x170>
					if(L_u8Time[1]>=4) L_u8Time[1]=0;
 8000738:	797b      	ldrb	r3, [r7, #5]
 800073a:	2b03      	cmp	r3, #3
 800073c:	d910      	bls.n	8000760 <Alaram_setAlarm+0x170>
 800073e:	2300      	movs	r3, #0
 8000740:	717b      	strb	r3, [r7, #5]
			break;
 8000742:	e00d      	b.n	8000760 <Alaram_setAlarm+0x170>
			case 2: if(L_u8Time[2]==6) L_u8Time[2]=0;
 8000744:	79bb      	ldrb	r3, [r7, #6]
 8000746:	2b06      	cmp	r3, #6
 8000748:	d10c      	bne.n	8000764 <Alaram_setAlarm+0x174>
 800074a:	2300      	movs	r3, #0
 800074c:	71bb      	strb	r3, [r7, #6]
			break;
 800074e:	e009      	b.n	8000764 <Alaram_setAlarm+0x174>
			case 3: if(L_u8Time[3]==10) L_u8Time[3]=0;
 8000750:	79fb      	ldrb	r3, [r7, #7]
 8000752:	2b0a      	cmp	r3, #10
 8000754:	d108      	bne.n	8000768 <Alaram_setAlarm+0x178>
 8000756:	2300      	movs	r3, #0
 8000758:	71fb      	strb	r3, [r7, #7]
			break;
 800075a:	e005      	b.n	8000768 <Alaram_setAlarm+0x178>
				break;
 800075c:	bf00      	nop
 800075e:	e004      	b.n	800076a <Alaram_setAlarm+0x17a>
			break;
 8000760:	bf00      	nop
 8000762:	e002      	b.n	800076a <Alaram_setAlarm+0x17a>
			break;
 8000764:	bf00      	nop
 8000766:	e000      	b.n	800076a <Alaram_setAlarm+0x17a>
			break;
 8000768:	bf00      	nop
			}
			HLCD_u8SendNumber(L_u8Time[L_s8CursorPos]);
 800076a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800076e:	3310      	adds	r3, #16
 8000770:	443b      	add	r3, r7
 8000772:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000776:	b29b      	uxth	r3, r3
 8000778:	4618      	mov	r0, r3
 800077a:	f000 fd95 	bl	80012a8 <HLCD_u8SendNumber>
			HLCD_u8SetCursor(L_u8Cursor[L_s8CursorPos]);
 800077e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000782:	3310      	adds	r3, #16
 8000784:	443b      	add	r3, r7
 8000786:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 800078a:	4618      	mov	r0, r3
 800078c:	f000 fd76 	bl	800127c <HLCD_u8SetCursor>
			/** wait for debounce **/
			HDELAY_delay_ms(30);
 8000790:	201e      	movs	r0, #30
 8000792:	f000 fc39 	bl	8001008 <HDELAY_delay_ms>
 8000796:	e0ec      	b.n	8000972 <Alaram_setAlarm+0x382>
		}
		/** Down **/
		else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5)==0){
 8000798:	2120      	movs	r1, #32
 800079a:	4850      	ldr	r0, [pc, #320]	; (80008dc <Alaram_setAlarm+0x2ec>)
 800079c:	f001 fb26 	bl	8001dec <HAL_GPIO_ReadPin>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d172      	bne.n	800088c <Alaram_setAlarm+0x29c>
				L_u8Time[L_s8CursorPos]--;
 80007a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007aa:	f103 0210 	add.w	r2, r3, #16
 80007ae:	443a      	add	r2, r7
 80007b0:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80007b4:	3a01      	subs	r2, #1
 80007b6:	b2d2      	uxtb	r2, r2
 80007b8:	3310      	adds	r3, #16
 80007ba:	443b      	add	r3, r7
 80007bc:	f803 2c0c 	strb.w	r2, [r3, #-12]
				switch(L_s8CursorPos){
 80007c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007c4:	2b03      	cmp	r3, #3
 80007c6:	d84a      	bhi.n	800085e <Alaram_setAlarm+0x26e>
 80007c8:	a201      	add	r2, pc, #4	; (adr r2, 80007d0 <Alaram_setAlarm+0x1e0>)
 80007ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007ce:	bf00      	nop
 80007d0:	080007e1 	.word	0x080007e1
 80007d4:	0800081b 	.word	0x0800081b
 80007d8:	08000839 	.word	0x08000839
 80007dc:	08000845 	.word	0x08000845
				case 0:
					if(L_u8Time[0]==0xff){
 80007e0:	793b      	ldrb	r3, [r7, #4]
 80007e2:	2bff      	cmp	r3, #255	; 0xff
 80007e4:	d134      	bne.n	8000850 <Alaram_setAlarm+0x260>
						L_u8Time[0]=2;
 80007e6:	2302      	movs	r3, #2
 80007e8:	713b      	strb	r3, [r7, #4]
						if(L_u8Time[1]>=4){
 80007ea:	797b      	ldrb	r3, [r7, #5]
 80007ec:	2b03      	cmp	r3, #3
 80007ee:	d92f      	bls.n	8000850 <Alaram_setAlarm+0x260>
							L_u8Time[1]=3;
 80007f0:	2303      	movs	r3, #3
 80007f2:	717b      	strb	r3, [r7, #5]
							HLCD_u8SetCursor(L_u8Cursor[1]);
 80007f4:	7a7b      	ldrb	r3, [r7, #9]
 80007f6:	4618      	mov	r0, r3
 80007f8:	f000 fd40 	bl	800127c <HLCD_u8SetCursor>
							HLCD_u8SendNumber(L_u8Time[1]);
 80007fc:	797b      	ldrb	r3, [r7, #5]
 80007fe:	b29b      	uxth	r3, r3
 8000800:	4618      	mov	r0, r3
 8000802:	f000 fd51 	bl	80012a8 <HLCD_u8SendNumber>
							HLCD_u8SetCursor(L_u8Cursor[L_s8CursorPos]);
 8000806:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800080a:	3310      	adds	r3, #16
 800080c:	443b      	add	r3, r7
 800080e:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8000812:	4618      	mov	r0, r3
 8000814:	f000 fd32 	bl	800127c <HLCD_u8SetCursor>
						}
					}
					break;
 8000818:	e01a      	b.n	8000850 <Alaram_setAlarm+0x260>
				case 1:
					if(L_u8Time[0]<2){
 800081a:	793b      	ldrb	r3, [r7, #4]
 800081c:	2b01      	cmp	r3, #1
 800081e:	d805      	bhi.n	800082c <Alaram_setAlarm+0x23c>
						if(L_u8Time[1]==0xff) L_u8Time[1]=9;
 8000820:	797b      	ldrb	r3, [r7, #5]
 8000822:	2bff      	cmp	r3, #255	; 0xff
 8000824:	d116      	bne.n	8000854 <Alaram_setAlarm+0x264>
 8000826:	2309      	movs	r3, #9
 8000828:	717b      	strb	r3, [r7, #5]
					}else{
						if(L_u8Time[1]==0xff) L_u8Time[1]=3;
					}
					break;
 800082a:	e013      	b.n	8000854 <Alaram_setAlarm+0x264>
						if(L_u8Time[1]==0xff) L_u8Time[1]=3;
 800082c:	797b      	ldrb	r3, [r7, #5]
 800082e:	2bff      	cmp	r3, #255	; 0xff
 8000830:	d110      	bne.n	8000854 <Alaram_setAlarm+0x264>
 8000832:	2303      	movs	r3, #3
 8000834:	717b      	strb	r3, [r7, #5]
					break;
 8000836:	e00d      	b.n	8000854 <Alaram_setAlarm+0x264>
				case 2: if(L_u8Time[2]==0xff) L_u8Time[2]=5;
 8000838:	79bb      	ldrb	r3, [r7, #6]
 800083a:	2bff      	cmp	r3, #255	; 0xff
 800083c:	d10c      	bne.n	8000858 <Alaram_setAlarm+0x268>
 800083e:	2305      	movs	r3, #5
 8000840:	71bb      	strb	r3, [r7, #6]
				break;
 8000842:	e009      	b.n	8000858 <Alaram_setAlarm+0x268>
				case 3: if(L_u8Time[3]==0xff) L_u8Time[3]=9;
 8000844:	79fb      	ldrb	r3, [r7, #7]
 8000846:	2bff      	cmp	r3, #255	; 0xff
 8000848:	d108      	bne.n	800085c <Alaram_setAlarm+0x26c>
 800084a:	2309      	movs	r3, #9
 800084c:	71fb      	strb	r3, [r7, #7]
				break;
 800084e:	e005      	b.n	800085c <Alaram_setAlarm+0x26c>
					break;
 8000850:	bf00      	nop
 8000852:	e004      	b.n	800085e <Alaram_setAlarm+0x26e>
					break;
 8000854:	bf00      	nop
 8000856:	e002      	b.n	800085e <Alaram_setAlarm+0x26e>
				break;
 8000858:	bf00      	nop
 800085a:	e000      	b.n	800085e <Alaram_setAlarm+0x26e>
				break;
 800085c:	bf00      	nop
				}
				HLCD_u8SendNumber(L_u8Time[L_s8CursorPos]);
 800085e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000862:	3310      	adds	r3, #16
 8000864:	443b      	add	r3, r7
 8000866:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800086a:	b29b      	uxth	r3, r3
 800086c:	4618      	mov	r0, r3
 800086e:	f000 fd1b 	bl	80012a8 <HLCD_u8SendNumber>
				HLCD_u8SetCursor(L_u8Cursor[L_s8CursorPos]);
 8000872:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000876:	3310      	adds	r3, #16
 8000878:	443b      	add	r3, r7
 800087a:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 800087e:	4618      	mov	r0, r3
 8000880:	f000 fcfc 	bl	800127c <HLCD_u8SetCursor>
				/** wait for debounce **/
				HDELAY_delay_ms(30);
 8000884:	201e      	movs	r0, #30
 8000886:	f000 fbbf 	bl	8001008 <HDELAY_delay_ms>
 800088a:	e072      	b.n	8000972 <Alaram_setAlarm+0x382>
		}
		/** Right **/
		else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6)==0){
 800088c:	2140      	movs	r1, #64	; 0x40
 800088e:	4813      	ldr	r0, [pc, #76]	; (80008dc <Alaram_setAlarm+0x2ec>)
 8000890:	f001 faac 	bl	8001dec <HAL_GPIO_ReadPin>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d122      	bne.n	80008e0 <Alaram_setAlarm+0x2f0>
			++L_s8CursorPos;
 800089a:	7bfb      	ldrb	r3, [r7, #15]
 800089c:	3301      	adds	r3, #1
 800089e:	b2db      	uxtb	r3, r3
 80008a0:	73fb      	strb	r3, [r7, #15]
			if(L_s8CursorPos==4) L_s8CursorPos=0;
 80008a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008a6:	2b04      	cmp	r3, #4
 80008a8:	d101      	bne.n	80008ae <Alaram_setAlarm+0x2be>
 80008aa:	2300      	movs	r3, #0
 80008ac:	73fb      	strb	r3, [r7, #15]
			HLCD_u8SetCursor(L_u8Cursor[L_s8CursorPos]);
 80008ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008b2:	3310      	adds	r3, #16
 80008b4:	443b      	add	r3, r7
 80008b6:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 80008ba:	4618      	mov	r0, r3
 80008bc:	f000 fcde 	bl	800127c <HLCD_u8SetCursor>
			/** wait for debounce **/
			HDELAY_delay_ms(30);
 80008c0:	201e      	movs	r0, #30
 80008c2:	f000 fba1 	bl	8001008 <HDELAY_delay_ms>
 80008c6:	e054      	b.n	8000972 <Alaram_setAlarm+0x382>
 80008c8:	04030100 	.word	0x04030100
 80008cc:	2000002d 	.word	0x2000002d
 80008d0:	cccccccd 	.word	0xcccccccd
 80008d4:	2000002c 	.word	0x2000002c
 80008d8:	20000000 	.word	0x20000000
 80008dc:	40020400 	.word	0x40020400

		}
		/** Left **/
		else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7)==0){
 80008e0:	2180      	movs	r1, #128	; 0x80
 80008e2:	482d      	ldr	r0, [pc, #180]	; (8000998 <Alaram_setAlarm+0x3a8>)
 80008e4:	f001 fa82 	bl	8001dec <HAL_GPIO_ReadPin>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d117      	bne.n	800091e <Alaram_setAlarm+0x32e>
			--L_s8CursorPos;
 80008ee:	7bfb      	ldrb	r3, [r7, #15]
 80008f0:	3b01      	subs	r3, #1
 80008f2:	b2db      	uxtb	r3, r3
 80008f4:	73fb      	strb	r3, [r7, #15]
			if(L_s8CursorPos==-1) L_s8CursorPos=3;
 80008f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008fe:	d101      	bne.n	8000904 <Alaram_setAlarm+0x314>
 8000900:	2303      	movs	r3, #3
 8000902:	73fb      	strb	r3, [r7, #15]
			HLCD_u8SetCursor(L_u8Cursor[L_s8CursorPos]);
 8000904:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000908:	3310      	adds	r3, #16
 800090a:	443b      	add	r3, r7
 800090c:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8000910:	4618      	mov	r0, r3
 8000912:	f000 fcb3 	bl	800127c <HLCD_u8SetCursor>
			/** wait for debounce **/
			HDELAY_delay_ms(30);
 8000916:	201e      	movs	r0, #30
 8000918:	f000 fb76 	bl	8001008 <HDELAY_delay_ms>
 800091c:	e029      	b.n	8000972 <Alaram_setAlarm+0x382>
		}
		/** Set Alarm **/
		else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9)==0){
 800091e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000922:	481d      	ldr	r0, [pc, #116]	; (8000998 <Alaram_setAlarm+0x3a8>)
 8000924:	f001 fa62 	bl	8001dec <HAL_GPIO_ReadPin>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d121      	bne.n	8000972 <Alaram_setAlarm+0x382>
			G_u8AlarmHours=L_u8Time[0]*10+L_u8Time[1];
 800092e:	793b      	ldrb	r3, [r7, #4]
 8000930:	461a      	mov	r2, r3
 8000932:	0092      	lsls	r2, r2, #2
 8000934:	4413      	add	r3, r2
 8000936:	005b      	lsls	r3, r3, #1
 8000938:	b2da      	uxtb	r2, r3
 800093a:	797b      	ldrb	r3, [r7, #5]
 800093c:	4413      	add	r3, r2
 800093e:	b2da      	uxtb	r2, r3
 8000940:	4b16      	ldr	r3, [pc, #88]	; (800099c <Alaram_setAlarm+0x3ac>)
 8000942:	701a      	strb	r2, [r3, #0]
			G_u8AlarmMins=L_u8Time[2]*10+L_u8Time[3];
 8000944:	79bb      	ldrb	r3, [r7, #6]
 8000946:	461a      	mov	r2, r3
 8000948:	0092      	lsls	r2, r2, #2
 800094a:	4413      	add	r3, r2
 800094c:	005b      	lsls	r3, r3, #1
 800094e:	b2da      	uxtb	r2, r3
 8000950:	79fb      	ldrb	r3, [r7, #7]
 8000952:	4413      	add	r3, r2
 8000954:	b2da      	uxtb	r2, r3
 8000956:	4b12      	ldr	r3, [pc, #72]	; (80009a0 <Alaram_setAlarm+0x3b0>)
 8000958:	701a      	strb	r2, [r3, #0]
			G_u8AlarmON=1;
 800095a:	4b12      	ldr	r3, [pc, #72]	; (80009a4 <Alaram_setAlarm+0x3b4>)
 800095c:	2201      	movs	r2, #1
 800095e:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8000960:	2201      	movs	r2, #1
 8000962:	2102      	movs	r1, #2
 8000964:	480c      	ldr	r0, [pc, #48]	; (8000998 <Alaram_setAlarm+0x3a8>)
 8000966:	f001 fa59 	bl	8001e1c <HAL_GPIO_WritePin>
			/** wait for debounce **/
			HDELAY_delay_ms(30);
 800096a:	201e      	movs	r0, #30
 800096c:	f000 fb4c 	bl	8001008 <HDELAY_delay_ms>
			break;
 8000970:	e008      	b.n	8000984 <Alaram_setAlarm+0x394>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8)!=0){
 8000972:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000976:	4808      	ldr	r0, [pc, #32]	; (8000998 <Alaram_setAlarm+0x3a8>)
 8000978:	f001 fa38 	bl	8001dec <HAL_GPIO_ReadPin>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	f47f ae8d 	bne.w	800069e <Alaram_setAlarm+0xae>
		}

	}
	/* call Clock_Init() to redisplay time */
	Clock_init();
 8000984:	f000 f812 	bl	80009ac <Clock_init>
	G_u8DisaplayFlag=1;
 8000988:	4b07      	ldr	r3, [pc, #28]	; (80009a8 <Alaram_setAlarm+0x3b8>)
 800098a:	2201      	movs	r2, #1
 800098c:	701a      	strb	r2, [r3, #0]

}
 800098e:	bf00      	nop
 8000990:	3710      	adds	r7, #16
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	40020400 	.word	0x40020400
 800099c:	2000002d 	.word	0x2000002d
 80009a0:	2000002c 	.word	0x2000002c
 80009a4:	2000002e 	.word	0x2000002e
 80009a8:	20000000 	.word	0x20000000

080009ac <Clock_init>:
/**
 * @brief displayes time in hh:mm:ss format on LCD using global time variables
 * 		 gets called in the start of the program from main -> 00:00:00
 * 		 and after the end of setting process
 */
void Clock_init(){
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
	HLCD_u8SetCursor(0);
 80009b0:	2000      	movs	r0, #0
 80009b2:	f000 fc63 	bl	800127c <HLCD_u8SetCursor>
	HLCD_u8SendNumber(G_u8Hours/10);
 80009b6:	4b2c      	ldr	r3, [pc, #176]	; (8000a68 <Clock_init+0xbc>)
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	4a2c      	ldr	r2, [pc, #176]	; (8000a6c <Clock_init+0xc0>)
 80009bc:	fba2 2303 	umull	r2, r3, r2, r3
 80009c0:	08db      	lsrs	r3, r3, #3
 80009c2:	b2db      	uxtb	r3, r3
 80009c4:	b29b      	uxth	r3, r3
 80009c6:	4618      	mov	r0, r3
 80009c8:	f000 fc6e 	bl	80012a8 <HLCD_u8SendNumber>
	HLCD_u8SendNumber(G_u8Hours%10);
 80009cc:	4b26      	ldr	r3, [pc, #152]	; (8000a68 <Clock_init+0xbc>)
 80009ce:	781a      	ldrb	r2, [r3, #0]
 80009d0:	4b26      	ldr	r3, [pc, #152]	; (8000a6c <Clock_init+0xc0>)
 80009d2:	fba3 1302 	umull	r1, r3, r3, r2
 80009d6:	08d9      	lsrs	r1, r3, #3
 80009d8:	460b      	mov	r3, r1
 80009da:	009b      	lsls	r3, r3, #2
 80009dc:	440b      	add	r3, r1
 80009de:	005b      	lsls	r3, r3, #1
 80009e0:	1ad3      	subs	r3, r2, r3
 80009e2:	b2db      	uxtb	r3, r3
 80009e4:	b29b      	uxth	r3, r3
 80009e6:	4618      	mov	r0, r3
 80009e8:	f000 fc5e 	bl	80012a8 <HLCD_u8SendNumber>
	HLCD_u8SendChar(':');
 80009ec:	203a      	movs	r0, #58	; 0x3a
 80009ee:	f000 fbc5 	bl	800117c <HLCD_u8SendChar>
	HLCD_u8SendNumber(G_u8Mins/10);
 80009f2:	4b1f      	ldr	r3, [pc, #124]	; (8000a70 <Clock_init+0xc4>)
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	4a1d      	ldr	r2, [pc, #116]	; (8000a6c <Clock_init+0xc0>)
 80009f8:	fba2 2303 	umull	r2, r3, r2, r3
 80009fc:	08db      	lsrs	r3, r3, #3
 80009fe:	b2db      	uxtb	r3, r3
 8000a00:	b29b      	uxth	r3, r3
 8000a02:	4618      	mov	r0, r3
 8000a04:	f000 fc50 	bl	80012a8 <HLCD_u8SendNumber>
	HLCD_u8SendNumber(G_u8Mins%10);
 8000a08:	4b19      	ldr	r3, [pc, #100]	; (8000a70 <Clock_init+0xc4>)
 8000a0a:	781a      	ldrb	r2, [r3, #0]
 8000a0c:	4b17      	ldr	r3, [pc, #92]	; (8000a6c <Clock_init+0xc0>)
 8000a0e:	fba3 1302 	umull	r1, r3, r3, r2
 8000a12:	08d9      	lsrs	r1, r3, #3
 8000a14:	460b      	mov	r3, r1
 8000a16:	009b      	lsls	r3, r3, #2
 8000a18:	440b      	add	r3, r1
 8000a1a:	005b      	lsls	r3, r3, #1
 8000a1c:	1ad3      	subs	r3, r2, r3
 8000a1e:	b2db      	uxtb	r3, r3
 8000a20:	b29b      	uxth	r3, r3
 8000a22:	4618      	mov	r0, r3
 8000a24:	f000 fc40 	bl	80012a8 <HLCD_u8SendNumber>
	HLCD_u8SendChar(':');
 8000a28:	203a      	movs	r0, #58	; 0x3a
 8000a2a:	f000 fba7 	bl	800117c <HLCD_u8SendChar>
	HLCD_u8SendNumber(G_u8Secs/10);
 8000a2e:	4b11      	ldr	r3, [pc, #68]	; (8000a74 <Clock_init+0xc8>)
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	4a0e      	ldr	r2, [pc, #56]	; (8000a6c <Clock_init+0xc0>)
 8000a34:	fba2 2303 	umull	r2, r3, r2, r3
 8000a38:	08db      	lsrs	r3, r3, #3
 8000a3a:	b2db      	uxtb	r3, r3
 8000a3c:	b29b      	uxth	r3, r3
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f000 fc32 	bl	80012a8 <HLCD_u8SendNumber>
	HLCD_u8SendNumber(G_u8Secs%10);
 8000a44:	4b0b      	ldr	r3, [pc, #44]	; (8000a74 <Clock_init+0xc8>)
 8000a46:	781a      	ldrb	r2, [r3, #0]
 8000a48:	4b08      	ldr	r3, [pc, #32]	; (8000a6c <Clock_init+0xc0>)
 8000a4a:	fba3 1302 	umull	r1, r3, r3, r2
 8000a4e:	08d9      	lsrs	r1, r3, #3
 8000a50:	460b      	mov	r3, r1
 8000a52:	009b      	lsls	r3, r3, #2
 8000a54:	440b      	add	r3, r1
 8000a56:	005b      	lsls	r3, r3, #1
 8000a58:	1ad3      	subs	r3, r2, r3
 8000a5a:	b2db      	uxtb	r3, r3
 8000a5c:	b29b      	uxth	r3, r3
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f000 fc22 	bl	80012a8 <HLCD_u8SendNumber>
}
 8000a64:	bf00      	nop
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	20000032 	.word	0x20000032
 8000a6c:	cccccccd 	.word	0xcccccccd
 8000a70:	20000031 	.word	0x20000031
 8000a74:	20000030 	.word	0x20000030

08000a78 <Clock_updateTime>:
 * @brief updates time global variables every 1 second 
 * called by systick interrupt 
 * calls Clock_display() if G_u8DisaplayFlag==1
 * 
 */
void Clock_updateTime(){
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0

	if(G_u8Secs==59){
 8000a7c:	4b1b      	ldr	r3, [pc, #108]	; (8000aec <Clock_updateTime+0x74>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	2b3b      	cmp	r3, #59	; 0x3b
 8000a82:	d11e      	bne.n	8000ac2 <Clock_updateTime+0x4a>
		G_u8Secs=0;
 8000a84:	4b19      	ldr	r3, [pc, #100]	; (8000aec <Clock_updateTime+0x74>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	701a      	strb	r2, [r3, #0]
		G_u8Mins++;
 8000a8a:	4b19      	ldr	r3, [pc, #100]	; (8000af0 <Clock_updateTime+0x78>)
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	3301      	adds	r3, #1
 8000a90:	b2da      	uxtb	r2, r3
 8000a92:	4b17      	ldr	r3, [pc, #92]	; (8000af0 <Clock_updateTime+0x78>)
 8000a94:	701a      	strb	r2, [r3, #0]
		if(G_u8Mins==60){
 8000a96:	4b16      	ldr	r3, [pc, #88]	; (8000af0 <Clock_updateTime+0x78>)
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	2b3c      	cmp	r3, #60	; 0x3c
 8000a9c:	d117      	bne.n	8000ace <Clock_updateTime+0x56>
			G_u8Mins=0;
 8000a9e:	4b14      	ldr	r3, [pc, #80]	; (8000af0 <Clock_updateTime+0x78>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	701a      	strb	r2, [r3, #0]
			if(G_u8Hours==23){
 8000aa4:	4b13      	ldr	r3, [pc, #76]	; (8000af4 <Clock_updateTime+0x7c>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	2b17      	cmp	r3, #23
 8000aaa:	d103      	bne.n	8000ab4 <Clock_updateTime+0x3c>
				G_u8Hours=0;
 8000aac:	4b11      	ldr	r3, [pc, #68]	; (8000af4 <Clock_updateTime+0x7c>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	701a      	strb	r2, [r3, #0]
 8000ab2:	e00c      	b.n	8000ace <Clock_updateTime+0x56>
			}else{
				G_u8Hours++;
 8000ab4:	4b0f      	ldr	r3, [pc, #60]	; (8000af4 <Clock_updateTime+0x7c>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	3301      	adds	r3, #1
 8000aba:	b2da      	uxtb	r2, r3
 8000abc:	4b0d      	ldr	r3, [pc, #52]	; (8000af4 <Clock_updateTime+0x7c>)
 8000abe:	701a      	strb	r2, [r3, #0]
 8000ac0:	e005      	b.n	8000ace <Clock_updateTime+0x56>
			}
		}
	}else{
		G_u8Secs++;
 8000ac2:	4b0a      	ldr	r3, [pc, #40]	; (8000aec <Clock_updateTime+0x74>)
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	3301      	adds	r3, #1
 8000ac8:	b2da      	uxtb	r2, r3
 8000aca:	4b08      	ldr	r3, [pc, #32]	; (8000aec <Clock_updateTime+0x74>)
 8000acc:	701a      	strb	r2, [r3, #0]
	}

	if(G_u8DisaplayFlag){
 8000ace:	4b0a      	ldr	r3, [pc, #40]	; (8000af8 <Clock_updateTime+0x80>)
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d008      	beq.n	8000ae8 <Clock_updateTime+0x70>
		Clock_display(G_u8Hours,G_u8Mins,G_u8Secs);
 8000ad6:	4b07      	ldr	r3, [pc, #28]	; (8000af4 <Clock_updateTime+0x7c>)
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	4a05      	ldr	r2, [pc, #20]	; (8000af0 <Clock_updateTime+0x78>)
 8000adc:	7811      	ldrb	r1, [r2, #0]
 8000ade:	4a03      	ldr	r2, [pc, #12]	; (8000aec <Clock_updateTime+0x74>)
 8000ae0:	7812      	ldrb	r2, [r2, #0]
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f000 f80a 	bl	8000afc <Clock_display>
	}
}
 8000ae8:	bf00      	nop
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	20000030 	.word	0x20000030
 8000af0:	20000031 	.word	0x20000031
 8000af4:	20000032 	.word	0x20000032
 8000af8:	20000000 	.word	0x20000000

08000afc <Clock_display>:
 * 
 * @param hr hours to be displayed from Clock_updateTime()
 * @param min minutes to be displayed from Clock_updateTime()
 * @param sec seconds to be displayed from Clock_updateTime()
 */
void Clock_display(u8 hr , u8 min , u8 sec){
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b084      	sub	sp, #16
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	4603      	mov	r3, r0
 8000b04:	71fb      	strb	r3, [r7, #7]
 8000b06:	460b      	mov	r3, r1
 8000b08:	71bb      	strb	r3, [r7, #6]
 8000b0a:	4613      	mov	r3, r2
 8000b0c:	717b      	strb	r3, [r7, #5]
	u8 L_u8SecDig1 = (sec/10)+'0';
 8000b0e:	797b      	ldrb	r3, [r7, #5]
 8000b10:	4a34      	ldr	r2, [pc, #208]	; (8000be4 <Clock_display+0xe8>)
 8000b12:	fba2 2303 	umull	r2, r3, r2, r3
 8000b16:	08db      	lsrs	r3, r3, #3
 8000b18:	b2db      	uxtb	r3, r3
 8000b1a:	3330      	adds	r3, #48	; 0x30
 8000b1c:	73fb      	strb	r3, [r7, #15]
	u8 L_u8SecDig2 = (sec%10)+'0';
 8000b1e:	797a      	ldrb	r2, [r7, #5]
 8000b20:	4b30      	ldr	r3, [pc, #192]	; (8000be4 <Clock_display+0xe8>)
 8000b22:	fba3 1302 	umull	r1, r3, r3, r2
 8000b26:	08d9      	lsrs	r1, r3, #3
 8000b28:	460b      	mov	r3, r1
 8000b2a:	009b      	lsls	r3, r3, #2
 8000b2c:	440b      	add	r3, r1
 8000b2e:	005b      	lsls	r3, r3, #1
 8000b30:	1ad3      	subs	r3, r2, r3
 8000b32:	b2db      	uxtb	r3, r3
 8000b34:	3330      	adds	r3, #48	; 0x30
 8000b36:	73bb      	strb	r3, [r7, #14]
	if(sec==0){
 8000b38:	797b      	ldrb	r3, [r7, #5]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d142      	bne.n	8000bc4 <Clock_display+0xc8>
		u8 L_u8MinDig1 = (min/10)+'0';
 8000b3e:	79bb      	ldrb	r3, [r7, #6]
 8000b40:	4a28      	ldr	r2, [pc, #160]	; (8000be4 <Clock_display+0xe8>)
 8000b42:	fba2 2303 	umull	r2, r3, r2, r3
 8000b46:	08db      	lsrs	r3, r3, #3
 8000b48:	b2db      	uxtb	r3, r3
 8000b4a:	3330      	adds	r3, #48	; 0x30
 8000b4c:	737b      	strb	r3, [r7, #13]
		u8 L_u8MinDig2 = (min%10)+'0';
 8000b4e:	79ba      	ldrb	r2, [r7, #6]
 8000b50:	4b24      	ldr	r3, [pc, #144]	; (8000be4 <Clock_display+0xe8>)
 8000b52:	fba3 1302 	umull	r1, r3, r3, r2
 8000b56:	08d9      	lsrs	r1, r3, #3
 8000b58:	460b      	mov	r3, r1
 8000b5a:	009b      	lsls	r3, r3, #2
 8000b5c:	440b      	add	r3, r1
 8000b5e:	005b      	lsls	r3, r3, #1
 8000b60:	1ad3      	subs	r3, r2, r3
 8000b62:	b2db      	uxtb	r3, r3
 8000b64:	3330      	adds	r3, #48	; 0x30
 8000b66:	733b      	strb	r3, [r7, #12]
		HLCD_u8SetCursor(3);
 8000b68:	2003      	movs	r0, #3
 8000b6a:	f000 fb87 	bl	800127c <HLCD_u8SetCursor>
		HLCD_u8SendChar(L_u8MinDig1);
 8000b6e:	7b7b      	ldrb	r3, [r7, #13]
 8000b70:	4618      	mov	r0, r3
 8000b72:	f000 fb03 	bl	800117c <HLCD_u8SendChar>
		HLCD_u8SendChar(L_u8MinDig2);
 8000b76:	7b3b      	ldrb	r3, [r7, #12]
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f000 faff 	bl	800117c <HLCD_u8SendChar>
		if(min==0){
 8000b7e:	79bb      	ldrb	r3, [r7, #6]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d11f      	bne.n	8000bc4 <Clock_display+0xc8>
			u8 L_u8HrDig1 = (hr/10)+'0';
 8000b84:	79fb      	ldrb	r3, [r7, #7]
 8000b86:	4a17      	ldr	r2, [pc, #92]	; (8000be4 <Clock_display+0xe8>)
 8000b88:	fba2 2303 	umull	r2, r3, r2, r3
 8000b8c:	08db      	lsrs	r3, r3, #3
 8000b8e:	b2db      	uxtb	r3, r3
 8000b90:	3330      	adds	r3, #48	; 0x30
 8000b92:	72fb      	strb	r3, [r7, #11]
			u8 L_u8HrDig2 = (hr%10)+'0';
 8000b94:	79fa      	ldrb	r2, [r7, #7]
 8000b96:	4b13      	ldr	r3, [pc, #76]	; (8000be4 <Clock_display+0xe8>)
 8000b98:	fba3 1302 	umull	r1, r3, r3, r2
 8000b9c:	08d9      	lsrs	r1, r3, #3
 8000b9e:	460b      	mov	r3, r1
 8000ba0:	009b      	lsls	r3, r3, #2
 8000ba2:	440b      	add	r3, r1
 8000ba4:	005b      	lsls	r3, r3, #1
 8000ba6:	1ad3      	subs	r3, r2, r3
 8000ba8:	b2db      	uxtb	r3, r3
 8000baa:	3330      	adds	r3, #48	; 0x30
 8000bac:	72bb      	strb	r3, [r7, #10]
			HLCD_u8SetCursor(0);
 8000bae:	2000      	movs	r0, #0
 8000bb0:	f000 fb64 	bl	800127c <HLCD_u8SetCursor>
			HLCD_u8SendChar(L_u8HrDig1);
 8000bb4:	7afb      	ldrb	r3, [r7, #11]
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f000 fae0 	bl	800117c <HLCD_u8SendChar>
			HLCD_u8SendChar(L_u8HrDig2);
 8000bbc:	7abb      	ldrb	r3, [r7, #10]
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f000 fadc 	bl	800117c <HLCD_u8SendChar>
		}
	}
		HLCD_u8SetCursor(6);
 8000bc4:	2006      	movs	r0, #6
 8000bc6:	f000 fb59 	bl	800127c <HLCD_u8SetCursor>
		HLCD_u8SendChar(L_u8SecDig1);
 8000bca:	7bfb      	ldrb	r3, [r7, #15]
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f000 fad5 	bl	800117c <HLCD_u8SendChar>
		HLCD_u8SendChar(L_u8SecDig2);
 8000bd2:	7bbb      	ldrb	r3, [r7, #14]
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f000 fad1 	bl	800117c <HLCD_u8SendChar>

}
 8000bda:	bf00      	nop
 8000bdc:	3710      	adds	r7, #16
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	cccccccd 	.word	0xcccccccd

08000be8 <Clock_setClock>:
 * right 		:to move the cursor to the right 
 * left			:to move the cursor to the left
 * cancel 		:to cancel setting the clock and redisplay the clock
 * set clock 	:to set the global time variables and display the updated time 
 */
void Clock_setClock(){
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b084      	sub	sp, #16
 8000bec:	af00      	add	r7, sp, #0
	/** wait for debounce **/
	HDELAY_delay_ms(30);
 8000bee:	201e      	movs	r0, #30
 8000bf0:	f000 fa0a 	bl	8001008 <HDELAY_delay_ms>
	/** Cursor positions without the ':' **/
	u8 L_u8Cursor[4]={0,1,3,4};
 8000bf4:	4bb2      	ldr	r3, [pc, #712]	; (8000ec0 <Clock_setClock+0x2d8>)
 8000bf6:	60bb      	str	r3, [r7, #8]
	s8 L_s8CursorPos=0;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	73fb      	strb	r3, [r7, #15]
	/** Clock current displayed values **/
	u8 L_u8Time[4]={G_u8Hours/10,G_u8Hours%10,G_u8Mins/10,G_u8Mins%10};
 8000bfc:	4bb1      	ldr	r3, [pc, #708]	; (8000ec4 <Clock_setClock+0x2dc>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	4ab1      	ldr	r2, [pc, #708]	; (8000ec8 <Clock_setClock+0x2e0>)
 8000c02:	fba2 2303 	umull	r2, r3, r2, r3
 8000c06:	08db      	lsrs	r3, r3, #3
 8000c08:	b2db      	uxtb	r3, r3
 8000c0a:	713b      	strb	r3, [r7, #4]
 8000c0c:	4bad      	ldr	r3, [pc, #692]	; (8000ec4 <Clock_setClock+0x2dc>)
 8000c0e:	781a      	ldrb	r2, [r3, #0]
 8000c10:	4bad      	ldr	r3, [pc, #692]	; (8000ec8 <Clock_setClock+0x2e0>)
 8000c12:	fba3 1302 	umull	r1, r3, r3, r2
 8000c16:	08d9      	lsrs	r1, r3, #3
 8000c18:	460b      	mov	r3, r1
 8000c1a:	009b      	lsls	r3, r3, #2
 8000c1c:	440b      	add	r3, r1
 8000c1e:	005b      	lsls	r3, r3, #1
 8000c20:	1ad3      	subs	r3, r2, r3
 8000c22:	b2db      	uxtb	r3, r3
 8000c24:	717b      	strb	r3, [r7, #5]
 8000c26:	4ba9      	ldr	r3, [pc, #676]	; (8000ecc <Clock_setClock+0x2e4>)
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	4aa7      	ldr	r2, [pc, #668]	; (8000ec8 <Clock_setClock+0x2e0>)
 8000c2c:	fba2 2303 	umull	r2, r3, r2, r3
 8000c30:	08db      	lsrs	r3, r3, #3
 8000c32:	b2db      	uxtb	r3, r3
 8000c34:	71bb      	strb	r3, [r7, #6]
 8000c36:	4ba5      	ldr	r3, [pc, #660]	; (8000ecc <Clock_setClock+0x2e4>)
 8000c38:	781a      	ldrb	r2, [r3, #0]
 8000c3a:	4ba3      	ldr	r3, [pc, #652]	; (8000ec8 <Clock_setClock+0x2e0>)
 8000c3c:	fba3 1302 	umull	r1, r3, r3, r2
 8000c40:	08d9      	lsrs	r1, r3, #3
 8000c42:	460b      	mov	r3, r1
 8000c44:	009b      	lsls	r3, r3, #2
 8000c46:	440b      	add	r3, r1
 8000c48:	005b      	lsls	r3, r3, #1
 8000c4a:	1ad3      	subs	r3, r2, r3
 8000c4c:	b2db      	uxtb	r3, r3
 8000c4e:	71fb      	strb	r3, [r7, #7]
	G_u8DisaplayFlag=0;
 8000c50:	4b9f      	ldr	r3, [pc, #636]	; (8000ed0 <Clock_setClock+0x2e8>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	701a      	strb	r2, [r3, #0]
	/** set setting clock display to only hours and minutes **/
	HLCD_u8ClearDisplay();
 8000c56:	f000 fb83 	bl	8001360 <HLCD_u8ClearDisplay>
	HLCD_u8SetCursor(0);
 8000c5a:	2000      	movs	r0, #0
 8000c5c:	f000 fb0e 	bl	800127c <HLCD_u8SetCursor>
	HLCD_u8SendNumber(L_u8Time[0]);
 8000c60:	793b      	ldrb	r3, [r7, #4]
 8000c62:	b29b      	uxth	r3, r3
 8000c64:	4618      	mov	r0, r3
 8000c66:	f000 fb1f 	bl	80012a8 <HLCD_u8SendNumber>
	HLCD_u8SendNumber(L_u8Time[1]);
 8000c6a:	797b      	ldrb	r3, [r7, #5]
 8000c6c:	b29b      	uxth	r3, r3
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f000 fb1a 	bl	80012a8 <HLCD_u8SendNumber>
	HLCD_u8SendChar(':');
 8000c74:	203a      	movs	r0, #58	; 0x3a
 8000c76:	f000 fa81 	bl	800117c <HLCD_u8SendChar>
	HLCD_u8SendNumber(L_u8Time[2]);
 8000c7a:	79bb      	ldrb	r3, [r7, #6]
 8000c7c:	b29b      	uxth	r3, r3
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f000 fb12 	bl	80012a8 <HLCD_u8SendNumber>
	HLCD_u8SendNumber(L_u8Time[3]);
 8000c84:	79fb      	ldrb	r3, [r7, #7]
 8000c86:	b29b      	uxth	r3, r3
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f000 fb0d 	bl	80012a8 <HLCD_u8SendNumber>
	HLCD_u8SetCursor(0);
 8000c8e:	2000      	movs	r0, #0
 8000c90:	f000 faf4 	bl	800127c <HLCD_u8SetCursor>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8)!=0){
 8000c94:	e163      	b.n	8000f5e <Clock_setClock+0x376>
		/** UP **/
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4)==0){
 8000c96:	2110      	movs	r1, #16
 8000c98:	488e      	ldr	r0, [pc, #568]	; (8000ed4 <Clock_setClock+0x2ec>)
 8000c9a:	f001 f8a7 	bl	8001dec <HAL_GPIO_ReadPin>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d175      	bne.n	8000d90 <Clock_setClock+0x1a8>
			L_u8Time[L_s8CursorPos]++;
 8000ca4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ca8:	f103 0210 	add.w	r2, r3, #16
 8000cac:	443a      	add	r2, r7
 8000cae:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8000cb2:	3201      	adds	r2, #1
 8000cb4:	b2d2      	uxtb	r2, r2
 8000cb6:	3310      	adds	r3, #16
 8000cb8:	443b      	add	r3, r7
 8000cba:	f803 2c0c 	strb.w	r2, [r3, #-12]
			switch(L_s8CursorPos){
 8000cbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cc2:	2b03      	cmp	r3, #3
 8000cc4:	d84d      	bhi.n	8000d62 <Clock_setClock+0x17a>
 8000cc6:	a201      	add	r2, pc, #4	; (adr r2, 8000ccc <Clock_setClock+0xe4>)
 8000cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ccc:	08000cdd 	.word	0x08000cdd
 8000cd0:	08000d1f 	.word	0x08000d1f
 8000cd4:	08000d3d 	.word	0x08000d3d
 8000cd8:	08000d49 	.word	0x08000d49
			case 0:
				if(L_u8Time[0]==3) L_u8Time[0]=0;
 8000cdc:	793b      	ldrb	r3, [r7, #4]
 8000cde:	2b03      	cmp	r3, #3
 8000ce0:	d102      	bne.n	8000ce8 <Clock_setClock+0x100>
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	713b      	strb	r3, [r7, #4]
					L_u8Time[1]=3;
					HLCD_u8SetCursor(L_u8Cursor[1]);
					HLCD_u8SendNumber(L_u8Time[1]);
					HLCD_u8SetCursor(L_u8Cursor[L_s8CursorPos]);
				}
				break;
 8000ce6:	e035      	b.n	8000d54 <Clock_setClock+0x16c>
				else if(L_u8Time[0]==2 && L_u8Time[1]>=4){
 8000ce8:	793b      	ldrb	r3, [r7, #4]
 8000cea:	2b02      	cmp	r3, #2
 8000cec:	d132      	bne.n	8000d54 <Clock_setClock+0x16c>
 8000cee:	797b      	ldrb	r3, [r7, #5]
 8000cf0:	2b03      	cmp	r3, #3
 8000cf2:	d92f      	bls.n	8000d54 <Clock_setClock+0x16c>
					L_u8Time[1]=3;
 8000cf4:	2303      	movs	r3, #3
 8000cf6:	717b      	strb	r3, [r7, #5]
					HLCD_u8SetCursor(L_u8Cursor[1]);
 8000cf8:	7a7b      	ldrb	r3, [r7, #9]
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f000 fabe 	bl	800127c <HLCD_u8SetCursor>
					HLCD_u8SendNumber(L_u8Time[1]);
 8000d00:	797b      	ldrb	r3, [r7, #5]
 8000d02:	b29b      	uxth	r3, r3
 8000d04:	4618      	mov	r0, r3
 8000d06:	f000 facf 	bl	80012a8 <HLCD_u8SendNumber>
					HLCD_u8SetCursor(L_u8Cursor[L_s8CursorPos]);
 8000d0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d0e:	3310      	adds	r3, #16
 8000d10:	443b      	add	r3, r7
 8000d12:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8000d16:	4618      	mov	r0, r3
 8000d18:	f000 fab0 	bl	800127c <HLCD_u8SetCursor>
				break;
 8000d1c:	e01a      	b.n	8000d54 <Clock_setClock+0x16c>
			case 1:
				if(L_u8Time[0]<2){
 8000d1e:	793b      	ldrb	r3, [r7, #4]
 8000d20:	2b01      	cmp	r3, #1
 8000d22:	d805      	bhi.n	8000d30 <Clock_setClock+0x148>
					if(L_u8Time[1]==10) L_u8Time[1]=0;
 8000d24:	797b      	ldrb	r3, [r7, #5]
 8000d26:	2b0a      	cmp	r3, #10
 8000d28:	d116      	bne.n	8000d58 <Clock_setClock+0x170>
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	717b      	strb	r3, [r7, #5]
				}else{
					if(L_u8Time[1]>=4) L_u8Time[1]=0;
				}
			break;
 8000d2e:	e013      	b.n	8000d58 <Clock_setClock+0x170>
					if(L_u8Time[1]>=4) L_u8Time[1]=0;
 8000d30:	797b      	ldrb	r3, [r7, #5]
 8000d32:	2b03      	cmp	r3, #3
 8000d34:	d910      	bls.n	8000d58 <Clock_setClock+0x170>
 8000d36:	2300      	movs	r3, #0
 8000d38:	717b      	strb	r3, [r7, #5]
			break;
 8000d3a:	e00d      	b.n	8000d58 <Clock_setClock+0x170>
			case 2: if(L_u8Time[2]==6) L_u8Time[2]=0;
 8000d3c:	79bb      	ldrb	r3, [r7, #6]
 8000d3e:	2b06      	cmp	r3, #6
 8000d40:	d10c      	bne.n	8000d5c <Clock_setClock+0x174>
 8000d42:	2300      	movs	r3, #0
 8000d44:	71bb      	strb	r3, [r7, #6]
			break;
 8000d46:	e009      	b.n	8000d5c <Clock_setClock+0x174>
			case 3: if(L_u8Time[3]==10) L_u8Time[3]=0;
 8000d48:	79fb      	ldrb	r3, [r7, #7]
 8000d4a:	2b0a      	cmp	r3, #10
 8000d4c:	d108      	bne.n	8000d60 <Clock_setClock+0x178>
 8000d4e:	2300      	movs	r3, #0
 8000d50:	71fb      	strb	r3, [r7, #7]
			break;
 8000d52:	e005      	b.n	8000d60 <Clock_setClock+0x178>
				break;
 8000d54:	bf00      	nop
 8000d56:	e004      	b.n	8000d62 <Clock_setClock+0x17a>
			break;
 8000d58:	bf00      	nop
 8000d5a:	e002      	b.n	8000d62 <Clock_setClock+0x17a>
			break;
 8000d5c:	bf00      	nop
 8000d5e:	e000      	b.n	8000d62 <Clock_setClock+0x17a>
			break;
 8000d60:	bf00      	nop
			}
			HLCD_u8SendNumber(L_u8Time[L_s8CursorPos]);
 8000d62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d66:	3310      	adds	r3, #16
 8000d68:	443b      	add	r3, r7
 8000d6a:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000d6e:	b29b      	uxth	r3, r3
 8000d70:	4618      	mov	r0, r3
 8000d72:	f000 fa99 	bl	80012a8 <HLCD_u8SendNumber>
			HLCD_u8SetCursor(L_u8Cursor[L_s8CursorPos]);
 8000d76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d7a:	3310      	adds	r3, #16
 8000d7c:	443b      	add	r3, r7
 8000d7e:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8000d82:	4618      	mov	r0, r3
 8000d84:	f000 fa7a 	bl	800127c <HLCD_u8SetCursor>
			/** wait for debounce **/
			HDELAY_delay_ms(30);
 8000d88:	201e      	movs	r0, #30
 8000d8a:	f000 f93d 	bl	8001008 <HDELAY_delay_ms>
 8000d8e:	e0e6      	b.n	8000f5e <Clock_setClock+0x376>
		}
		/** Down **/
		else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5)==0){
 8000d90:	2120      	movs	r1, #32
 8000d92:	4850      	ldr	r0, [pc, #320]	; (8000ed4 <Clock_setClock+0x2ec>)
 8000d94:	f001 f82a 	bl	8001dec <HAL_GPIO_ReadPin>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d172      	bne.n	8000e84 <Clock_setClock+0x29c>
				L_u8Time[L_s8CursorPos]--;
 8000d9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000da2:	f103 0210 	add.w	r2, r3, #16
 8000da6:	443a      	add	r2, r7
 8000da8:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8000dac:	3a01      	subs	r2, #1
 8000dae:	b2d2      	uxtb	r2, r2
 8000db0:	3310      	adds	r3, #16
 8000db2:	443b      	add	r3, r7
 8000db4:	f803 2c0c 	strb.w	r2, [r3, #-12]
				switch(L_s8CursorPos){
 8000db8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dbc:	2b03      	cmp	r3, #3
 8000dbe:	d84a      	bhi.n	8000e56 <Clock_setClock+0x26e>
 8000dc0:	a201      	add	r2, pc, #4	; (adr r2, 8000dc8 <Clock_setClock+0x1e0>)
 8000dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dc6:	bf00      	nop
 8000dc8:	08000dd9 	.word	0x08000dd9
 8000dcc:	08000e13 	.word	0x08000e13
 8000dd0:	08000e31 	.word	0x08000e31
 8000dd4:	08000e3d 	.word	0x08000e3d
				case 0:
					if(L_u8Time[0]==0xff){
 8000dd8:	793b      	ldrb	r3, [r7, #4]
 8000dda:	2bff      	cmp	r3, #255	; 0xff
 8000ddc:	d134      	bne.n	8000e48 <Clock_setClock+0x260>
						L_u8Time[0]=2;
 8000dde:	2302      	movs	r3, #2
 8000de0:	713b      	strb	r3, [r7, #4]
						if(L_u8Time[1]>=4){
 8000de2:	797b      	ldrb	r3, [r7, #5]
 8000de4:	2b03      	cmp	r3, #3
 8000de6:	d92f      	bls.n	8000e48 <Clock_setClock+0x260>
							L_u8Time[1]=3;
 8000de8:	2303      	movs	r3, #3
 8000dea:	717b      	strb	r3, [r7, #5]
							HLCD_u8SetCursor(L_u8Cursor[1]);
 8000dec:	7a7b      	ldrb	r3, [r7, #9]
 8000dee:	4618      	mov	r0, r3
 8000df0:	f000 fa44 	bl	800127c <HLCD_u8SetCursor>
							HLCD_u8SendNumber(L_u8Time[1]);
 8000df4:	797b      	ldrb	r3, [r7, #5]
 8000df6:	b29b      	uxth	r3, r3
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f000 fa55 	bl	80012a8 <HLCD_u8SendNumber>
							HLCD_u8SetCursor(L_u8Cursor[L_s8CursorPos]);
 8000dfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e02:	3310      	adds	r3, #16
 8000e04:	443b      	add	r3, r7
 8000e06:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f000 fa36 	bl	800127c <HLCD_u8SetCursor>
						}
					}
					break;
 8000e10:	e01a      	b.n	8000e48 <Clock_setClock+0x260>
				case 1:
					if(L_u8Time[0]<2){
 8000e12:	793b      	ldrb	r3, [r7, #4]
 8000e14:	2b01      	cmp	r3, #1
 8000e16:	d805      	bhi.n	8000e24 <Clock_setClock+0x23c>
						if(L_u8Time[1]==0xff) L_u8Time[1]=9;
 8000e18:	797b      	ldrb	r3, [r7, #5]
 8000e1a:	2bff      	cmp	r3, #255	; 0xff
 8000e1c:	d116      	bne.n	8000e4c <Clock_setClock+0x264>
 8000e1e:	2309      	movs	r3, #9
 8000e20:	717b      	strb	r3, [r7, #5]
					}else{
						if(L_u8Time[1]==0xff) L_u8Time[1]=3;
					}
					break;
 8000e22:	e013      	b.n	8000e4c <Clock_setClock+0x264>
						if(L_u8Time[1]==0xff) L_u8Time[1]=3;
 8000e24:	797b      	ldrb	r3, [r7, #5]
 8000e26:	2bff      	cmp	r3, #255	; 0xff
 8000e28:	d110      	bne.n	8000e4c <Clock_setClock+0x264>
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	717b      	strb	r3, [r7, #5]
					break;
 8000e2e:	e00d      	b.n	8000e4c <Clock_setClock+0x264>
				case 2: if(L_u8Time[2]==0xff) L_u8Time[2]=5;
 8000e30:	79bb      	ldrb	r3, [r7, #6]
 8000e32:	2bff      	cmp	r3, #255	; 0xff
 8000e34:	d10c      	bne.n	8000e50 <Clock_setClock+0x268>
 8000e36:	2305      	movs	r3, #5
 8000e38:	71bb      	strb	r3, [r7, #6]
				break;
 8000e3a:	e009      	b.n	8000e50 <Clock_setClock+0x268>
				case 3: if(L_u8Time[3]==0xff) L_u8Time[3]=9;
 8000e3c:	79fb      	ldrb	r3, [r7, #7]
 8000e3e:	2bff      	cmp	r3, #255	; 0xff
 8000e40:	d108      	bne.n	8000e54 <Clock_setClock+0x26c>
 8000e42:	2309      	movs	r3, #9
 8000e44:	71fb      	strb	r3, [r7, #7]
				break;
 8000e46:	e005      	b.n	8000e54 <Clock_setClock+0x26c>
					break;
 8000e48:	bf00      	nop
 8000e4a:	e004      	b.n	8000e56 <Clock_setClock+0x26e>
					break;
 8000e4c:	bf00      	nop
 8000e4e:	e002      	b.n	8000e56 <Clock_setClock+0x26e>
				break;
 8000e50:	bf00      	nop
 8000e52:	e000      	b.n	8000e56 <Clock_setClock+0x26e>
				break;
 8000e54:	bf00      	nop
				}
				HLCD_u8SendNumber(L_u8Time[L_s8CursorPos]);
 8000e56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e5a:	3310      	adds	r3, #16
 8000e5c:	443b      	add	r3, r7
 8000e5e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000e62:	b29b      	uxth	r3, r3
 8000e64:	4618      	mov	r0, r3
 8000e66:	f000 fa1f 	bl	80012a8 <HLCD_u8SendNumber>
				HLCD_u8SetCursor(L_u8Cursor[L_s8CursorPos]);
 8000e6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e6e:	3310      	adds	r3, #16
 8000e70:	443b      	add	r3, r7
 8000e72:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8000e76:	4618      	mov	r0, r3
 8000e78:	f000 fa00 	bl	800127c <HLCD_u8SetCursor>
				/** wait for debounce **/
				HDELAY_delay_ms(30);
 8000e7c:	201e      	movs	r0, #30
 8000e7e:	f000 f8c3 	bl	8001008 <HDELAY_delay_ms>
 8000e82:	e06c      	b.n	8000f5e <Clock_setClock+0x376>
		}
		/** Right **/
		else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6)==0){
 8000e84:	2140      	movs	r1, #64	; 0x40
 8000e86:	4813      	ldr	r0, [pc, #76]	; (8000ed4 <Clock_setClock+0x2ec>)
 8000e88:	f000 ffb0 	bl	8001dec <HAL_GPIO_ReadPin>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d122      	bne.n	8000ed8 <Clock_setClock+0x2f0>
			++L_s8CursorPos;
 8000e92:	7bfb      	ldrb	r3, [r7, #15]
 8000e94:	3301      	adds	r3, #1
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	73fb      	strb	r3, [r7, #15]
			if(L_s8CursorPos==4) L_s8CursorPos=0;
 8000e9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e9e:	2b04      	cmp	r3, #4
 8000ea0:	d101      	bne.n	8000ea6 <Clock_setClock+0x2be>
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	73fb      	strb	r3, [r7, #15]
			HLCD_u8SetCursor(L_u8Cursor[L_s8CursorPos]);
 8000ea6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eaa:	3310      	adds	r3, #16
 8000eac:	443b      	add	r3, r7
 8000eae:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f000 f9e2 	bl	800127c <HLCD_u8SetCursor>
			/** wait for debounce **/
			HDELAY_delay_ms(30);
 8000eb8:	201e      	movs	r0, #30
 8000eba:	f000 f8a5 	bl	8001008 <HDELAY_delay_ms>
 8000ebe:	e04e      	b.n	8000f5e <Clock_setClock+0x376>
 8000ec0:	04030100 	.word	0x04030100
 8000ec4:	20000032 	.word	0x20000032
 8000ec8:	cccccccd 	.word	0xcccccccd
 8000ecc:	20000031 	.word	0x20000031
 8000ed0:	20000000 	.word	0x20000000
 8000ed4:	40020400 	.word	0x40020400

		}
		/** Left **/
		else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7)==0){
 8000ed8:	2180      	movs	r1, #128	; 0x80
 8000eda:	482a      	ldr	r0, [pc, #168]	; (8000f84 <Clock_setClock+0x39c>)
 8000edc:	f000 ff86 	bl	8001dec <HAL_GPIO_ReadPin>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d117      	bne.n	8000f16 <Clock_setClock+0x32e>
			--L_s8CursorPos;
 8000ee6:	7bfb      	ldrb	r3, [r7, #15]
 8000ee8:	3b01      	subs	r3, #1
 8000eea:	b2db      	uxtb	r3, r3
 8000eec:	73fb      	strb	r3, [r7, #15]
			if(L_s8CursorPos==-1) L_s8CursorPos=3;
 8000eee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ef6:	d101      	bne.n	8000efc <Clock_setClock+0x314>
 8000ef8:	2303      	movs	r3, #3
 8000efa:	73fb      	strb	r3, [r7, #15]
			HLCD_u8SetCursor(L_u8Cursor[L_s8CursorPos]);
 8000efc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f00:	3310      	adds	r3, #16
 8000f02:	443b      	add	r3, r7
 8000f04:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f000 f9b7 	bl	800127c <HLCD_u8SetCursor>
			/** wait for debounce **/
			HDELAY_delay_ms(30);
 8000f0e:	201e      	movs	r0, #30
 8000f10:	f000 f87a 	bl	8001008 <HDELAY_delay_ms>
 8000f14:	e023      	b.n	8000f5e <Clock_setClock+0x376>
		}
		/** Set Clock **/
		else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3)==0){
 8000f16:	2108      	movs	r1, #8
 8000f18:	481a      	ldr	r0, [pc, #104]	; (8000f84 <Clock_setClock+0x39c>)
 8000f1a:	f000 ff67 	bl	8001dec <HAL_GPIO_ReadPin>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d11c      	bne.n	8000f5e <Clock_setClock+0x376>
			G_u8Hours=L_u8Time[0]*10+L_u8Time[1];
 8000f24:	793b      	ldrb	r3, [r7, #4]
 8000f26:	461a      	mov	r2, r3
 8000f28:	0092      	lsls	r2, r2, #2
 8000f2a:	4413      	add	r3, r2
 8000f2c:	005b      	lsls	r3, r3, #1
 8000f2e:	b2da      	uxtb	r2, r3
 8000f30:	797b      	ldrb	r3, [r7, #5]
 8000f32:	4413      	add	r3, r2
 8000f34:	b2da      	uxtb	r2, r3
 8000f36:	4b14      	ldr	r3, [pc, #80]	; (8000f88 <Clock_setClock+0x3a0>)
 8000f38:	701a      	strb	r2, [r3, #0]
			G_u8Mins=L_u8Time[2]*10+L_u8Time[3];
 8000f3a:	79bb      	ldrb	r3, [r7, #6]
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	0092      	lsls	r2, r2, #2
 8000f40:	4413      	add	r3, r2
 8000f42:	005b      	lsls	r3, r3, #1
 8000f44:	b2da      	uxtb	r2, r3
 8000f46:	79fb      	ldrb	r3, [r7, #7]
 8000f48:	4413      	add	r3, r2
 8000f4a:	b2da      	uxtb	r2, r3
 8000f4c:	4b0f      	ldr	r3, [pc, #60]	; (8000f8c <Clock_setClock+0x3a4>)
 8000f4e:	701a      	strb	r2, [r3, #0]
			G_u8Secs=0;
 8000f50:	4b0f      	ldr	r3, [pc, #60]	; (8000f90 <Clock_setClock+0x3a8>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	701a      	strb	r2, [r3, #0]
			/** wait for debounce **/
			HDELAY_delay_ms(30);
 8000f56:	201e      	movs	r0, #30
 8000f58:	f000 f856 	bl	8001008 <HDELAY_delay_ms>
			break;
 8000f5c:	e008      	b.n	8000f70 <Clock_setClock+0x388>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8)!=0){
 8000f5e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f62:	4808      	ldr	r0, [pc, #32]	; (8000f84 <Clock_setClock+0x39c>)
 8000f64:	f000 ff42 	bl	8001dec <HAL_GPIO_ReadPin>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	f47f ae93 	bne.w	8000c96 <Clock_setClock+0xae>
		}

	}
	/* call Clock_Init() to redisplay time */
	Clock_init();
 8000f70:	f7ff fd1c 	bl	80009ac <Clock_init>
	G_u8DisaplayFlag=1;
 8000f74:	4b07      	ldr	r3, [pc, #28]	; (8000f94 <Clock_setClock+0x3ac>)
 8000f76:	2201      	movs	r2, #1
 8000f78:	701a      	strb	r2, [r3, #0]
}
 8000f7a:	bf00      	nop
 8000f7c:	3710      	adds	r7, #16
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40020400 	.word	0x40020400
 8000f88:	20000032 	.word	0x20000032
 8000f8c:	20000031 	.word	0x20000031
 8000f90:	20000030 	.word	0x20000030
 8000f94:	20000000 	.word	0x20000000

08000f98 <Clock_compareTime>:
 * 
 * @param A_u8Hours :hours to be compared
 * @param A_u8Mins 	:minutes to be compared
 * @return u8 : true or false
 */
u8 Clock_compareTime(u8 A_u8Hours,u8 A_u8Mins){
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	460a      	mov	r2, r1
 8000fa2:	71fb      	strb	r3, [r7, #7]
 8000fa4:	4613      	mov	r3, r2
 8000fa6:	71bb      	strb	r3, [r7, #6]
	return (u8)(A_u8Hours==G_u8Hours && A_u8Mins == G_u8Mins);
 8000fa8:	4b09      	ldr	r3, [pc, #36]	; (8000fd0 <Clock_compareTime+0x38>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	79fa      	ldrb	r2, [r7, #7]
 8000fae:	429a      	cmp	r2, r3
 8000fb0:	d106      	bne.n	8000fc0 <Clock_compareTime+0x28>
 8000fb2:	4b08      	ldr	r3, [pc, #32]	; (8000fd4 <Clock_compareTime+0x3c>)
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	79ba      	ldrb	r2, [r7, #6]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d101      	bne.n	8000fc0 <Clock_compareTime+0x28>
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	e000      	b.n	8000fc2 <Clock_compareTime+0x2a>
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	b2db      	uxtb	r3, r3
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	370c      	adds	r7, #12
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr
 8000fd0:	20000032 	.word	0x20000032
 8000fd4:	20000031 	.word	0x20000031

08000fd8 <HDELAY_delay_us>:
/**
 * @brief creates a delay  in microsecond using Tim4
 * 
 * @param us_time :time in microsecond
 */
void HDELAY_delay_us(u16 us_time){
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	80fb      	strh	r3, [r7, #6]
	TIM4->CNT=0;
 8000fe2:	4b08      	ldr	r3, [pc, #32]	; (8001004 <HDELAY_delay_us+0x2c>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	625a      	str	r2, [r3, #36]	; 0x24
	while(TIM4->CNT < us_time);
 8000fe8:	bf00      	nop
 8000fea:	4b06      	ldr	r3, [pc, #24]	; (8001004 <HDELAY_delay_us+0x2c>)
 8000fec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fee:	88fb      	ldrh	r3, [r7, #6]
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	d3fa      	bcc.n	8000fea <HDELAY_delay_us+0x12>
}
 8000ff4:	bf00      	nop
 8000ff6:	bf00      	nop
 8000ff8:	370c      	adds	r7, #12
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	40000800 	.word	0x40000800

08001008 <HDELAY_delay_ms>:
/**
 * @brief creates a delay  in millisecond using Tim4
 * 
 * @param ms_time : time in millisecond
 */
void HDELAY_delay_ms(u16 ms_time){
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	80fb      	strh	r3, [r7, #6]
	ms_time*=1000;
 8001012:	88fb      	ldrh	r3, [r7, #6]
 8001014:	461a      	mov	r2, r3
 8001016:	0152      	lsls	r2, r2, #5
 8001018:	1ad2      	subs	r2, r2, r3
 800101a:	0092      	lsls	r2, r2, #2
 800101c:	4413      	add	r3, r2
 800101e:	00db      	lsls	r3, r3, #3
 8001020:	80fb      	strh	r3, [r7, #6]
	TIM4->CNT=0;
 8001022:	4b08      	ldr	r3, [pc, #32]	; (8001044 <HDELAY_delay_ms+0x3c>)
 8001024:	2200      	movs	r2, #0
 8001026:	625a      	str	r2, [r3, #36]	; 0x24
	while(TIM4->CNT< ms_time);
 8001028:	bf00      	nop
 800102a:	4b06      	ldr	r3, [pc, #24]	; (8001044 <HDELAY_delay_ms+0x3c>)
 800102c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800102e:	88fb      	ldrh	r3, [r7, #6]
 8001030:	429a      	cmp	r2, r3
 8001032:	d3fa      	bcc.n	800102a <HDELAY_delay_ms+0x22>
}
 8001034:	bf00      	nop
 8001036:	bf00      	nop
 8001038:	370c      	adds	r7, #12
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	40000800 	.word	0x40000800

08001048 <HLCD_voidINIT>:
/**
 * @brief function to init lcd module
 * 
 */
void HLCD_voidINIT(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0

	HDELAY_delay_us(31);
 800104c:	201f      	movs	r0, #31
 800104e:	f7ff ffc3 	bl	8000fd8 <HDELAY_delay_us>
	/*Function set command*/
	HLCD_u8SendCmnd(FunctionSet);
 8001052:	2030      	movs	r0, #48	; 0x30
 8001054:	f000 f814 	bl	8001080 <HLCD_u8SendCmnd>
	HDELAY_delay_us(40);
 8001058:	2028      	movs	r0, #40	; 0x28
 800105a:	f7ff ffbd 	bl	8000fd8 <HDELAY_delay_us>
	/*Display on/off Control*/
	HLCD_u8SendCmnd(DisplayControl);
 800105e:	200e      	movs	r0, #14
 8001060:	f000 f80e 	bl	8001080 <HLCD_u8SendCmnd>
	HDELAY_delay_us(40);
 8001064:	2028      	movs	r0, #40	; 0x28
 8001066:	f7ff ffb7 	bl	8000fd8 <HDELAY_delay_us>
	/*Display Clear*/
	HLCD_u8SendCmnd(DisplayClear);
 800106a:	2001      	movs	r0, #1
 800106c:	f000 f808 	bl	8001080 <HLCD_u8SendCmnd>
	HDELAY_delay_ms(2);
 8001070:	2002      	movs	r0, #2
 8001072:	f7ff ffc9 	bl	8001008 <HDELAY_delay_ms>
	/*Entry Mode Set*/
	HLCD_u8SendCmnd(EntryMode);
 8001076:	2006      	movs	r0, #6
 8001078:	f000 f802 	bl	8001080 <HLCD_u8SendCmnd>
}
 800107c:	bf00      	nop
 800107e:	bd80      	pop	{r7, pc}

08001080 <HLCD_u8SendCmnd>:
 * 
 * @param Copy_u8Cmnd :the command to be sent
 * @return u8 : Error state 
 */
u8 HLCD_u8SendCmnd(u8 Copy_u8Cmnd)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	4603      	mov	r3, r0
 8001088:	71fb      	strb	r3, [r7, #7]
	u8 Local_u8ErrorState=STD_TYPES_OK;
 800108a:	2301      	movs	r3, #1
 800108c:	73fb      	strb	r3, [r7, #15]
	/*1- set Rs pin=> Low (command)*/
	HAL_GPIO_WritePin(HLCD_u8_RS_PORT,HLCD_u8_RS_PIN,GPIO_PIN_RESET);
 800108e:	2200      	movs	r2, #0
 8001090:	2101      	movs	r1, #1
 8001092:	4839      	ldr	r0, [pc, #228]	; (8001178 <HLCD_u8SendCmnd+0xf8>)
 8001094:	f000 fec2 	bl	8001e1c <HAL_GPIO_WritePin>
	/*2- set Rw pin=>low (write)*/
	HAL_GPIO_WritePin(HLCD_u8_RW_PORT,HLCD_u8_RW_PIN,GPIO_PIN_RESET);
 8001098:	2200      	movs	r2, #0
 800109a:	2102      	movs	r1, #2
 800109c:	4836      	ldr	r0, [pc, #216]	; (8001178 <HLCD_u8SendCmnd+0xf8>)
 800109e:	f000 febd 	bl	8001e1c <HAL_GPIO_WritePin>
	/*3- send command to LCD on data Pins*/
	HAL_GPIO_WritePin(HCLD_u8_DATA_PORT, HLCD_u8DATA_PIN0, GET_BIT(Copy_u8Cmnd,0));
 80010a2:	79fb      	ldrb	r3, [r7, #7]
 80010a4:	f003 0301 	and.w	r3, r3, #1
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	461a      	mov	r2, r3
 80010ac:	2108      	movs	r1, #8
 80010ae:	4832      	ldr	r0, [pc, #200]	; (8001178 <HLCD_u8SendCmnd+0xf8>)
 80010b0:	f000 feb4 	bl	8001e1c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HCLD_u8_DATA_PORT, HLCD_u8DATA_PIN1, GET_BIT(Copy_u8Cmnd,1));
 80010b4:	79fb      	ldrb	r3, [r7, #7]
 80010b6:	085b      	lsrs	r3, r3, #1
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	f003 0301 	and.w	r3, r3, #1
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	461a      	mov	r2, r3
 80010c2:	2110      	movs	r1, #16
 80010c4:	482c      	ldr	r0, [pc, #176]	; (8001178 <HLCD_u8SendCmnd+0xf8>)
 80010c6:	f000 fea9 	bl	8001e1c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HCLD_u8_DATA_PORT, HLCD_u8DATA_PIN2, GET_BIT(Copy_u8Cmnd,2));
 80010ca:	79fb      	ldrb	r3, [r7, #7]
 80010cc:	089b      	lsrs	r3, r3, #2
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	f003 0301 	and.w	r3, r3, #1
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	461a      	mov	r2, r3
 80010d8:	2120      	movs	r1, #32
 80010da:	4827      	ldr	r0, [pc, #156]	; (8001178 <HLCD_u8SendCmnd+0xf8>)
 80010dc:	f000 fe9e 	bl	8001e1c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HCLD_u8_DATA_PORT, HLCD_u8DATA_PIN3, GET_BIT(Copy_u8Cmnd,3));
 80010e0:	79fb      	ldrb	r3, [r7, #7]
 80010e2:	08db      	lsrs	r3, r3, #3
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	f003 0301 	and.w	r3, r3, #1
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	461a      	mov	r2, r3
 80010ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010f2:	4821      	ldr	r0, [pc, #132]	; (8001178 <HLCD_u8SendCmnd+0xf8>)
 80010f4:	f000 fe92 	bl	8001e1c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HCLD_u8_DATA_PORT, HLCD_u8DATA_PIN4, GET_BIT(Copy_u8Cmnd,4));
 80010f8:	79fb      	ldrb	r3, [r7, #7]
 80010fa:	091b      	lsrs	r3, r3, #4
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	f003 0301 	and.w	r3, r3, #1
 8001102:	b2db      	uxtb	r3, r3
 8001104:	461a      	mov	r2, r3
 8001106:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800110a:	481b      	ldr	r0, [pc, #108]	; (8001178 <HLCD_u8SendCmnd+0xf8>)
 800110c:	f000 fe86 	bl	8001e1c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HCLD_u8_DATA_PORT, HLCD_u8DATA_PIN5, GET_BIT(Copy_u8Cmnd,5));
 8001110:	79fb      	ldrb	r3, [r7, #7]
 8001112:	095b      	lsrs	r3, r3, #5
 8001114:	b2db      	uxtb	r3, r3
 8001116:	f003 0301 	and.w	r3, r3, #1
 800111a:	b2db      	uxtb	r3, r3
 800111c:	461a      	mov	r2, r3
 800111e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001122:	4815      	ldr	r0, [pc, #84]	; (8001178 <HLCD_u8SendCmnd+0xf8>)
 8001124:	f000 fe7a 	bl	8001e1c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HCLD_u8_DATA_PORT, HLCD_u8DATA_PIN6, GET_BIT(Copy_u8Cmnd,6));
 8001128:	79fb      	ldrb	r3, [r7, #7]
 800112a:	099b      	lsrs	r3, r3, #6
 800112c:	b2db      	uxtb	r3, r3
 800112e:	f003 0301 	and.w	r3, r3, #1
 8001132:	b2db      	uxtb	r3, r3
 8001134:	461a      	mov	r2, r3
 8001136:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800113a:	480f      	ldr	r0, [pc, #60]	; (8001178 <HLCD_u8SendCmnd+0xf8>)
 800113c:	f000 fe6e 	bl	8001e1c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HCLD_u8_DATA_PORT, HLCD_u8DATA_PIN7, GET_BIT(Copy_u8Cmnd,7));
 8001140:	79fb      	ldrb	r3, [r7, #7]
 8001142:	09db      	lsrs	r3, r3, #7
 8001144:	b2db      	uxtb	r3, r3
 8001146:	461a      	mov	r2, r3
 8001148:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800114c:	480a      	ldr	r0, [pc, #40]	; (8001178 <HLCD_u8SendCmnd+0xf8>)
 800114e:	f000 fe65 	bl	8001e1c <HAL_GPIO_WritePin>
	/*4- set Enable pulse*/
	HAL_GPIO_WritePin(HLCD_u8_EN_PORT,HLCD_u8_EN_PIN, GPIO_PIN_SET);
 8001152:	2201      	movs	r2, #1
 8001154:	2104      	movs	r1, #4
 8001156:	4808      	ldr	r0, [pc, #32]	; (8001178 <HLCD_u8SendCmnd+0xf8>)
 8001158:	f000 fe60 	bl	8001e1c <HAL_GPIO_WritePin>
	HDELAY_delay_us(5);
 800115c:	2005      	movs	r0, #5
 800115e:	f7ff ff3b 	bl	8000fd8 <HDELAY_delay_us>
	HAL_GPIO_WritePin(HLCD_u8_EN_PORT,HLCD_u8_EN_PIN, GPIO_PIN_RESET);
 8001162:	2200      	movs	r2, #0
 8001164:	2104      	movs	r1, #4
 8001166:	4804      	ldr	r0, [pc, #16]	; (8001178 <HLCD_u8SendCmnd+0xf8>)
 8001168:	f000 fe58 	bl	8001e1c <HAL_GPIO_WritePin>
	return Local_u8ErrorState;
 800116c:	7bfb      	ldrb	r3, [r7, #15]
}
 800116e:	4618      	mov	r0, r3
 8001170:	3710      	adds	r7, #16
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	40020000 	.word	0x40020000

0800117c <HLCD_u8SendChar>:
 * 
 * @param Copy_u8Char :the char to be sent
 * @return u8  : Error state 
 */
u8 HLCD_u8SendChar (u8 Copy_u8Char)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
 8001182:	4603      	mov	r3, r0
 8001184:	71fb      	strb	r3, [r7, #7]
	u8 Local_u8ErrorState=STD_TYPES_OK;
 8001186:	2301      	movs	r3, #1
 8001188:	73fb      	strb	r3, [r7, #15]
	/*1- set Rs pin=> high (char)*/
	HAL_GPIO_WritePin(HLCD_u8_RS_PORT,HLCD_u8_RS_PIN, GPIO_PIN_SET);
 800118a:	2201      	movs	r2, #1
 800118c:	2101      	movs	r1, #1
 800118e:	483a      	ldr	r0, [pc, #232]	; (8001278 <HLCD_u8SendChar+0xfc>)
 8001190:	f000 fe44 	bl	8001e1c <HAL_GPIO_WritePin>
	/*2- set Rw pin=>low (write)*/
	HAL_GPIO_WritePin(HLCD_u8_RW_PORT,HLCD_u8_RW_PIN, GPIO_PIN_RESET);
 8001194:	2200      	movs	r2, #0
 8001196:	2102      	movs	r1, #2
 8001198:	4837      	ldr	r0, [pc, #220]	; (8001278 <HLCD_u8SendChar+0xfc>)
 800119a:	f000 fe3f 	bl	8001e1c <HAL_GPIO_WritePin>
	/*3- send command to LCD on data Pins*/
	HAL_GPIO_WritePin(HCLD_u8_DATA_PORT, HLCD_u8DATA_PIN0, GET_BIT(Copy_u8Char,0));
 800119e:	79fb      	ldrb	r3, [r7, #7]
 80011a0:	f003 0301 	and.w	r3, r3, #1
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	461a      	mov	r2, r3
 80011a8:	2108      	movs	r1, #8
 80011aa:	4833      	ldr	r0, [pc, #204]	; (8001278 <HLCD_u8SendChar+0xfc>)
 80011ac:	f000 fe36 	bl	8001e1c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HCLD_u8_DATA_PORT, HLCD_u8DATA_PIN1, GET_BIT(Copy_u8Char,1));
 80011b0:	79fb      	ldrb	r3, [r7, #7]
 80011b2:	085b      	lsrs	r3, r3, #1
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	f003 0301 	and.w	r3, r3, #1
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	461a      	mov	r2, r3
 80011be:	2110      	movs	r1, #16
 80011c0:	482d      	ldr	r0, [pc, #180]	; (8001278 <HLCD_u8SendChar+0xfc>)
 80011c2:	f000 fe2b 	bl	8001e1c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HCLD_u8_DATA_PORT, HLCD_u8DATA_PIN2, GET_BIT(Copy_u8Char,2));
 80011c6:	79fb      	ldrb	r3, [r7, #7]
 80011c8:	089b      	lsrs	r3, r3, #2
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	f003 0301 	and.w	r3, r3, #1
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	461a      	mov	r2, r3
 80011d4:	2120      	movs	r1, #32
 80011d6:	4828      	ldr	r0, [pc, #160]	; (8001278 <HLCD_u8SendChar+0xfc>)
 80011d8:	f000 fe20 	bl	8001e1c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HCLD_u8_DATA_PORT, HLCD_u8DATA_PIN3, GET_BIT(Copy_u8Char,3));
 80011dc:	79fb      	ldrb	r3, [r7, #7]
 80011de:	08db      	lsrs	r3, r3, #3
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	f003 0301 	and.w	r3, r3, #1
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	461a      	mov	r2, r3
 80011ea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011ee:	4822      	ldr	r0, [pc, #136]	; (8001278 <HLCD_u8SendChar+0xfc>)
 80011f0:	f000 fe14 	bl	8001e1c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HCLD_u8_DATA_PORT, HLCD_u8DATA_PIN4, GET_BIT(Copy_u8Char,4));
 80011f4:	79fb      	ldrb	r3, [r7, #7]
 80011f6:	091b      	lsrs	r3, r3, #4
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	461a      	mov	r2, r3
 8001202:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001206:	481c      	ldr	r0, [pc, #112]	; (8001278 <HLCD_u8SendChar+0xfc>)
 8001208:	f000 fe08 	bl	8001e1c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HCLD_u8_DATA_PORT, HLCD_u8DATA_PIN5, GET_BIT(Copy_u8Char,5));
 800120c:	79fb      	ldrb	r3, [r7, #7]
 800120e:	095b      	lsrs	r3, r3, #5
 8001210:	b2db      	uxtb	r3, r3
 8001212:	f003 0301 	and.w	r3, r3, #1
 8001216:	b2db      	uxtb	r3, r3
 8001218:	461a      	mov	r2, r3
 800121a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800121e:	4816      	ldr	r0, [pc, #88]	; (8001278 <HLCD_u8SendChar+0xfc>)
 8001220:	f000 fdfc 	bl	8001e1c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HCLD_u8_DATA_PORT, HLCD_u8DATA_PIN6, GET_BIT(Copy_u8Char,6));
 8001224:	79fb      	ldrb	r3, [r7, #7]
 8001226:	099b      	lsrs	r3, r3, #6
 8001228:	b2db      	uxtb	r3, r3
 800122a:	f003 0301 	and.w	r3, r3, #1
 800122e:	b2db      	uxtb	r3, r3
 8001230:	461a      	mov	r2, r3
 8001232:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001236:	4810      	ldr	r0, [pc, #64]	; (8001278 <HLCD_u8SendChar+0xfc>)
 8001238:	f000 fdf0 	bl	8001e1c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HCLD_u8_DATA_PORT, HLCD_u8DATA_PIN7, GET_BIT(Copy_u8Char,7));
 800123c:	79fb      	ldrb	r3, [r7, #7]
 800123e:	09db      	lsrs	r3, r3, #7
 8001240:	b2db      	uxtb	r3, r3
 8001242:	461a      	mov	r2, r3
 8001244:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001248:	480b      	ldr	r0, [pc, #44]	; (8001278 <HLCD_u8SendChar+0xfc>)
 800124a:	f000 fde7 	bl	8001e1c <HAL_GPIO_WritePin>
	/*4- set Enable pulse*/
	HAL_GPIO_WritePin(HLCD_u8_EN_PORT,HLCD_u8_EN_PIN, GPIO_PIN_SET);
 800124e:	2201      	movs	r2, #1
 8001250:	2104      	movs	r1, #4
 8001252:	4809      	ldr	r0, [pc, #36]	; (8001278 <HLCD_u8SendChar+0xfc>)
 8001254:	f000 fde2 	bl	8001e1c <HAL_GPIO_WritePin>
	HDELAY_delay_us(5);
 8001258:	2005      	movs	r0, #5
 800125a:	f7ff febd 	bl	8000fd8 <HDELAY_delay_us>
	HAL_GPIO_WritePin(HLCD_u8_EN_PORT,HLCD_u8_EN_PIN, GPIO_PIN_RESET);
 800125e:	2200      	movs	r2, #0
 8001260:	2104      	movs	r1, #4
 8001262:	4805      	ldr	r0, [pc, #20]	; (8001278 <HLCD_u8SendChar+0xfc>)
 8001264:	f000 fdda 	bl	8001e1c <HAL_GPIO_WritePin>
	/* wait until process is done */
	HDELAY_delay_us(40);
 8001268:	2028      	movs	r0, #40	; 0x28
 800126a:	f7ff feb5 	bl	8000fd8 <HDELAY_delay_us>
	return Local_u8ErrorState;
 800126e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001270:	4618      	mov	r0, r3
 8001272:	3710      	adds	r7, #16
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	40020000 	.word	0x40020000

0800127c <HLCD_u8SetCursor>:
 * 
 * @param Copy_u8CharNum : cursor position
 * @return u8 : Error state 
 */
u8 HLCD_u8SetCursor(u8 Copy_u8CharNum)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	4603      	mov	r3, r0
 8001284:	71fb      	strb	r3, [r7, #7]
	u8 Local_u8ErrorState=STD_TYPES_OK;
 8001286:	2301      	movs	r3, #1
 8001288:	73fb      	strb	r3, [r7, #15]
		HLCD_u8SendCmnd(0x80+Copy_u8CharNum);
 800128a:	79fb      	ldrb	r3, [r7, #7]
 800128c:	3b80      	subs	r3, #128	; 0x80
 800128e:	b2db      	uxtb	r3, r3
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff fef5 	bl	8001080 <HLCD_u8SendCmnd>
		/* wait until process is done */
			HDELAY_delay_us(40);
 8001296:	2028      	movs	r0, #40	; 0x28
 8001298:	f7ff fe9e 	bl	8000fd8 <HDELAY_delay_us>
	return Local_u8ErrorState;
 800129c:	7bfb      	ldrb	r3, [r7, #15]
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3710      	adds	r7, #16
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
	...

080012a8 <HLCD_u8SendNumber>:
 * 
 * @param Copy_u8Number the number to be converted to ascii
 * @return u8 : Error state 
 */
u8 HLCD_u8SendNumber(u16 Copy_u8Number)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b086      	sub	sp, #24
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4603      	mov	r3, r0
 80012b0:	80fb      	strh	r3, [r7, #6]
	u8 Local_u8ErrorState=STD_TYPES_OK;
 80012b2:	2301      	movs	r3, #1
 80012b4:	743b      	strb	r3, [r7, #16]
	u8 temp1;
	u16 temp2=Copy_u8Number;
 80012b6:	88fb      	ldrh	r3, [r7, #6]
 80012b8:	82fb      	strh	r3, [r7, #22]
	u16 temp3=1;
 80012ba:	2301      	movs	r3, #1
 80012bc:	82bb      	strh	r3, [r7, #20]
	u8 counter=0;
 80012be:	2300      	movs	r3, #0
 80012c0:	74fb      	strb	r3, [r7, #19]
	if(Copy_u8Number==0)
 80012c2:	88fb      	ldrh	r3, [r7, #6]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d10c      	bne.n	80012e2 <HLCD_u8SendNumber+0x3a>
		HLCD_u8SendChar('0');
 80012c8:	2030      	movs	r0, #48	; 0x30
 80012ca:	f7ff ff57 	bl	800117c <HLCD_u8SendChar>
 80012ce:	e040      	b.n	8001352 <HLCD_u8SendNumber+0xaa>
	else{
	while(temp2!=0)
	{
		temp2=temp2/10;
 80012d0:	8afb      	ldrh	r3, [r7, #22]
 80012d2:	4a22      	ldr	r2, [pc, #136]	; (800135c <HLCD_u8SendNumber+0xb4>)
 80012d4:	fba2 2303 	umull	r2, r3, r2, r3
 80012d8:	08db      	lsrs	r3, r3, #3
 80012da:	82fb      	strh	r3, [r7, #22]
		counter++;
 80012dc:	7cfb      	ldrb	r3, [r7, #19]
 80012de:	3301      	adds	r3, #1
 80012e0:	74fb      	strb	r3, [r7, #19]
	while(temp2!=0)
 80012e2:	8afb      	ldrh	r3, [r7, #22]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d1f3      	bne.n	80012d0 <HLCD_u8SendNumber+0x28>
	}
	for(u8 i=0;i<(counter-1);i++)
 80012e8:	2300      	movs	r3, #0
 80012ea:	74bb      	strb	r3, [r7, #18]
 80012ec:	e008      	b.n	8001300 <HLCD_u8SendNumber+0x58>
			temp3=temp3*10;
 80012ee:	8abb      	ldrh	r3, [r7, #20]
 80012f0:	461a      	mov	r2, r3
 80012f2:	0092      	lsls	r2, r2, #2
 80012f4:	4413      	add	r3, r2
 80012f6:	005b      	lsls	r3, r3, #1
 80012f8:	82bb      	strh	r3, [r7, #20]
	for(u8 i=0;i<(counter-1);i++)
 80012fa:	7cbb      	ldrb	r3, [r7, #18]
 80012fc:	3301      	adds	r3, #1
 80012fe:	74bb      	strb	r3, [r7, #18]
 8001300:	7cba      	ldrb	r2, [r7, #18]
 8001302:	7cfb      	ldrb	r3, [r7, #19]
 8001304:	3b01      	subs	r3, #1
 8001306:	429a      	cmp	r2, r3
 8001308:	dbf1      	blt.n	80012ee <HLCD_u8SendNumber+0x46>
	for(u8 i=0;i<counter; i++)
 800130a:	2300      	movs	r3, #0
 800130c:	747b      	strb	r3, [r7, #17]
 800130e:	e01c      	b.n	800134a <HLCD_u8SendNumber+0xa2>
	{
		temp1=(Copy_u8Number)/temp3;
 8001310:	88fa      	ldrh	r2, [r7, #6]
 8001312:	8abb      	ldrh	r3, [r7, #20]
 8001314:	fbb2 f3f3 	udiv	r3, r2, r3
 8001318:	b29b      	uxth	r3, r3
 800131a:	73fb      	strb	r3, [r7, #15]
		Copy_u8Number=(Copy_u8Number)%temp3;
 800131c:	88fb      	ldrh	r3, [r7, #6]
 800131e:	8aba      	ldrh	r2, [r7, #20]
 8001320:	fbb3 f1f2 	udiv	r1, r3, r2
 8001324:	fb01 f202 	mul.w	r2, r1, r2
 8001328:	1a9b      	subs	r3, r3, r2
 800132a:	80fb      	strh	r3, [r7, #6]
		temp3=temp3/10;
 800132c:	8abb      	ldrh	r3, [r7, #20]
 800132e:	4a0b      	ldr	r2, [pc, #44]	; (800135c <HLCD_u8SendNumber+0xb4>)
 8001330:	fba2 2303 	umull	r2, r3, r2, r3
 8001334:	08db      	lsrs	r3, r3, #3
 8001336:	82bb      	strh	r3, [r7, #20]
		HLCD_u8SendChar(48+temp1);
 8001338:	7bfb      	ldrb	r3, [r7, #15]
 800133a:	3330      	adds	r3, #48	; 0x30
 800133c:	b2db      	uxtb	r3, r3
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff ff1c 	bl	800117c <HLCD_u8SendChar>
	for(u8 i=0;i<counter; i++)
 8001344:	7c7b      	ldrb	r3, [r7, #17]
 8001346:	3301      	adds	r3, #1
 8001348:	747b      	strb	r3, [r7, #17]
 800134a:	7c7a      	ldrb	r2, [r7, #17]
 800134c:	7cfb      	ldrb	r3, [r7, #19]
 800134e:	429a      	cmp	r2, r3
 8001350:	d3de      	bcc.n	8001310 <HLCD_u8SendNumber+0x68>
	}
	}
	return Local_u8ErrorState;
 8001352:	7c3b      	ldrb	r3, [r7, #16]
}
 8001354:	4618      	mov	r0, r3
 8001356:	3718      	adds	r7, #24
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	cccccccd 	.word	0xcccccccd

08001360 <HLCD_u8ClearDisplay>:
 * @brief clears the characters displayed on the LCD
 * 
 * @return u8 : Error state 
 */
u8 HLCD_u8ClearDisplay(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
	HLCD_u8SendCmnd(0x01);
 8001364:	2001      	movs	r0, #1
 8001366:	f7ff fe8b 	bl	8001080 <HLCD_u8SendCmnd>
	HDELAY_delay_ms(5);
 800136a:	2005      	movs	r0, #5
 800136c:	f7ff fe4c 	bl	8001008 <HDELAY_delay_ms>
	return 1;
 8001370:	2301      	movs	r3, #1
}
 8001372:	4618      	mov	r0, r3
 8001374:	bd80      	pop	{r7, pc}
	...

08001378 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001378:	b598      	push	{r3, r4, r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800137c:	f000 fa32 	bl	80017e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001380:	f000 f862 	bl	8001448 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /**Configure the Systick interrupt time -> 1000ms
     * then start timer */
  HAL_SYSTICK_Config(SystemCoreClock / HAL_GetTickFreq());
 8001384:	4b2c      	ldr	r3, [pc, #176]	; (8001438 <main+0xc0>)
 8001386:	681c      	ldr	r4, [r3, #0]
 8001388:	f000 fa9e 	bl	80018c8 <HAL_GetTickFreq>
 800138c:	4603      	mov	r3, r0
 800138e:	fbb4 f3f3 	udiv	r3, r4, r3
 8001392:	4618      	mov	r0, r3
 8001394:	f000 fb7d 	bl	8001a92 <HAL_SYSTICK_Config>
  /** Configure clock source **/
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK_DIV8);
 8001398:	2000      	movs	r0, #0
 800139a:	f000 fb87 	bl	8001aac <HAL_SYSTICK_CLKSourceConfig>
  /* Disable systick interrupt until init is finished */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Pos);
 800139e:	4b27      	ldr	r3, [pc, #156]	; (800143c <main+0xc4>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a26      	ldr	r2, [pc, #152]	; (800143c <main+0xc4>)
 80013a4:	f023 0301 	bic.w	r3, r3, #1
 80013a8:	6013      	str	r3, [r2, #0]

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013aa:	f000 f8fb 	bl	80015a4 <MX_GPIO_Init>
  MX_TIM4_Init();
 80013ae:	f000 f8ab 	bl	8001508 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  /** start timer to use for LCD delays **/
  HAL_TIM_Base_Start(&htim4);
 80013b2:	4823      	ldr	r0, [pc, #140]	; (8001440 <main+0xc8>)
 80013b4:	f001 f9c0 	bl	8002738 <HAL_TIM_Base_Start>
  /** Init 1 line 16 char LCD   */
  HLCD_voidINIT();
 80013b8:	f7ff fe46 	bl	8001048 <HLCD_voidINIT>
  /** Init Clock **/
  Clock_init();
 80013bc:	f7ff faf6 	bl	80009ac <Clock_init>
  /** Enable systick interrupt */
  SET_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Pos);
 80013c0:	4b1e      	ldr	r3, [pc, #120]	; (800143c <main+0xc4>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a1d      	ldr	r2, [pc, #116]	; (800143c <main+0xc4>)
 80013c6:	f043 0301 	orr.w	r3, r3, #1
 80013ca:	6013      	str	r3, [r2, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  /** check if set clock is pressed **/
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3)==0){
 80013cc:	2108      	movs	r1, #8
 80013ce:	481d      	ldr	r0, [pc, #116]	; (8001444 <main+0xcc>)
 80013d0:	f000 fd0c 	bl	8001dec <HAL_GPIO_ReadPin>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d102      	bne.n	80013e0 <main+0x68>
		  Clock_setClock();
 80013da:	f7ff fc05 	bl	8000be8 <Clock_setClock>
 80013de:	e7f5      	b.n	80013cc <main+0x54>
	  }
	  /** check if set alarm is pressed **/
	  else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9)==0){
 80013e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013e4:	4817      	ldr	r0, [pc, #92]	; (8001444 <main+0xcc>)
 80013e6:	f000 fd01 	bl	8001dec <HAL_GPIO_ReadPin>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d102      	bne.n	80013f6 <main+0x7e>
		  Alaram_setAlarm();
 80013f0:	f7ff f8fe 	bl	80005f0 <Alaram_setAlarm>
 80013f4:	e7ea      	b.n	80013cc <main+0x54>
	  }
	  /** check if snooze is pressed **/
	  else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10)==0){
 80013f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013fa:	4812      	ldr	r0, [pc, #72]	; (8001444 <main+0xcc>)
 80013fc:	f000 fcf6 	bl	8001dec <HAL_GPIO_ReadPin>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d102      	bne.n	800140c <main+0x94>
		  Alarm_Snooze();
 8001406:	f7ff f883 	bl	8000510 <Alarm_Snooze>
 800140a:	e7df      	b.n	80013cc <main+0x54>
	  }
	  /** check if stop alarm is pressed **/
	  else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12)==0){
 800140c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001410:	480c      	ldr	r0, [pc, #48]	; (8001444 <main+0xcc>)
 8001412:	f000 fceb 	bl	8001dec <HAL_GPIO_ReadPin>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d102      	bne.n	8001422 <main+0xaa>
		  Alarm_Stop();
 800141c:	f7ff f8ae 	bl	800057c <Alarm_Stop>
 8001420:	e7d4      	b.n	80013cc <main+0x54>
	  }
	  /** check if alarm ON/OFF is pressed **/
	  else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13)==0){
 8001422:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001426:	4807      	ldr	r0, [pc, #28]	; (8001444 <main+0xcc>)
 8001428:	f000 fce0 	bl	8001dec <HAL_GPIO_ReadPin>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d1cc      	bne.n	80013cc <main+0x54>
		  Alarm_ON_OFF();
 8001432:	f7ff f8c1 	bl	80005b8 <Alarm_ON_OFF>
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3)==0){
 8001436:	e7c9      	b.n	80013cc <main+0x54>
 8001438:	20000004 	.word	0x20000004
 800143c:	e000e010 	.word	0xe000e010
 8001440:	20000034 	.word	0x20000034
 8001444:	40020400 	.word	0x40020400

08001448 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b094      	sub	sp, #80	; 0x50
 800144c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800144e:	f107 0320 	add.w	r3, r7, #32
 8001452:	2230      	movs	r2, #48	; 0x30
 8001454:	2100      	movs	r1, #0
 8001456:	4618      	mov	r0, r3
 8001458:	f001 fc24 	bl	8002ca4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800145c:	f107 030c 	add.w	r3, r7, #12
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
 8001464:	605a      	str	r2, [r3, #4]
 8001466:	609a      	str	r2, [r3, #8]
 8001468:	60da      	str	r2, [r3, #12]
 800146a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800146c:	2300      	movs	r3, #0
 800146e:	60bb      	str	r3, [r7, #8]
 8001470:	4b23      	ldr	r3, [pc, #140]	; (8001500 <SystemClock_Config+0xb8>)
 8001472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001474:	4a22      	ldr	r2, [pc, #136]	; (8001500 <SystemClock_Config+0xb8>)
 8001476:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800147a:	6413      	str	r3, [r2, #64]	; 0x40
 800147c:	4b20      	ldr	r3, [pc, #128]	; (8001500 <SystemClock_Config+0xb8>)
 800147e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001480:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001484:	60bb      	str	r3, [r7, #8]
 8001486:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001488:	2300      	movs	r3, #0
 800148a:	607b      	str	r3, [r7, #4]
 800148c:	4b1d      	ldr	r3, [pc, #116]	; (8001504 <SystemClock_Config+0xbc>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001494:	4a1b      	ldr	r2, [pc, #108]	; (8001504 <SystemClock_Config+0xbc>)
 8001496:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800149a:	6013      	str	r3, [r2, #0]
 800149c:	4b19      	ldr	r3, [pc, #100]	; (8001504 <SystemClock_Config+0xbc>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014a4:	607b      	str	r3, [r7, #4]
 80014a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014a8:	2302      	movs	r3, #2
 80014aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014ac:	2301      	movs	r3, #1
 80014ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014b0:	2310      	movs	r3, #16
 80014b2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80014b4:	2300      	movs	r3, #0
 80014b6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014b8:	f107 0320 	add.w	r3, r7, #32
 80014bc:	4618      	mov	r0, r3
 80014be:	f000 fcc7 	bl	8001e50 <HAL_RCC_OscConfig>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <SystemClock_Config+0x84>
  {
    Error_Handler();
 80014c8:	f000 f8d2 	bl	8001670 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014cc:	230f      	movs	r3, #15
 80014ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80014d0:	2300      	movs	r3, #0
 80014d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014d4:	2300      	movs	r3, #0
 80014d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014d8:	2300      	movs	r3, #0
 80014da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014dc:	2300      	movs	r3, #0
 80014de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80014e0:	f107 030c 	add.w	r3, r7, #12
 80014e4:	2100      	movs	r1, #0
 80014e6:	4618      	mov	r0, r3
 80014e8:	f000 ff2a 	bl	8002340 <HAL_RCC_ClockConfig>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80014f2:	f000 f8bd 	bl	8001670 <Error_Handler>
  }
}
 80014f6:	bf00      	nop
 80014f8:	3750      	adds	r7, #80	; 0x50
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	40023800 	.word	0x40023800
 8001504:	40007000 	.word	0x40007000

08001508 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b086      	sub	sp, #24
 800150c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800150e:	f107 0308 	add.w	r3, r7, #8
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	605a      	str	r2, [r3, #4]
 8001518:	609a      	str	r2, [r3, #8]
 800151a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800151c:	463b      	mov	r3, r7
 800151e:	2200      	movs	r2, #0
 8001520:	601a      	str	r2, [r3, #0]
 8001522:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001524:	4b1d      	ldr	r3, [pc, #116]	; (800159c <MX_TIM4_Init+0x94>)
 8001526:	4a1e      	ldr	r2, [pc, #120]	; (80015a0 <MX_TIM4_Init+0x98>)
 8001528:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16-1;
 800152a:	4b1c      	ldr	r3, [pc, #112]	; (800159c <MX_TIM4_Init+0x94>)
 800152c:	220f      	movs	r2, #15
 800152e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001530:	4b1a      	ldr	r3, [pc, #104]	; (800159c <MX_TIM4_Init+0x94>)
 8001532:	2200      	movs	r2, #0
 8001534:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535-1;
 8001536:	4b19      	ldr	r3, [pc, #100]	; (800159c <MX_TIM4_Init+0x94>)
 8001538:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800153c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800153e:	4b17      	ldr	r3, [pc, #92]	; (800159c <MX_TIM4_Init+0x94>)
 8001540:	2200      	movs	r2, #0
 8001542:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001544:	4b15      	ldr	r3, [pc, #84]	; (800159c <MX_TIM4_Init+0x94>)
 8001546:	2200      	movs	r2, #0
 8001548:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800154a:	4814      	ldr	r0, [pc, #80]	; (800159c <MX_TIM4_Init+0x94>)
 800154c:	f001 f8a4 	bl	8002698 <HAL_TIM_Base_Init>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001556:	f000 f88b 	bl	8001670 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800155a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800155e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001560:	f107 0308 	add.w	r3, r7, #8
 8001564:	4619      	mov	r1, r3
 8001566:	480d      	ldr	r0, [pc, #52]	; (800159c <MX_TIM4_Init+0x94>)
 8001568:	f001 f940 	bl	80027ec <HAL_TIM_ConfigClockSource>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001572:	f000 f87d 	bl	8001670 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001576:	2300      	movs	r3, #0
 8001578:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800157a:	2300      	movs	r3, #0
 800157c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800157e:	463b      	mov	r3, r7
 8001580:	4619      	mov	r1, r3
 8001582:	4806      	ldr	r0, [pc, #24]	; (800159c <MX_TIM4_Init+0x94>)
 8001584:	f001 fb20 	bl	8002bc8 <HAL_TIMEx_MasterConfigSynchronization>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800158e:	f000 f86f 	bl	8001670 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001592:	bf00      	nop
 8001594:	3718      	adds	r7, #24
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	20000034 	.word	0x20000034
 80015a0:	40000800 	.word	0x40000800

080015a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b088      	sub	sp, #32
 80015a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015aa:	f107 030c 	add.w	r3, r7, #12
 80015ae:	2200      	movs	r2, #0
 80015b0:	601a      	str	r2, [r3, #0]
 80015b2:	605a      	str	r2, [r3, #4]
 80015b4:	609a      	str	r2, [r3, #8]
 80015b6:	60da      	str	r2, [r3, #12]
 80015b8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ba:	2300      	movs	r3, #0
 80015bc:	60bb      	str	r3, [r7, #8]
 80015be:	4b29      	ldr	r3, [pc, #164]	; (8001664 <MX_GPIO_Init+0xc0>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c2:	4a28      	ldr	r2, [pc, #160]	; (8001664 <MX_GPIO_Init+0xc0>)
 80015c4:	f043 0301 	orr.w	r3, r3, #1
 80015c8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ca:	4b26      	ldr	r3, [pc, #152]	; (8001664 <MX_GPIO_Init+0xc0>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ce:	f003 0301 	and.w	r3, r3, #1
 80015d2:	60bb      	str	r3, [r7, #8]
 80015d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015d6:	2300      	movs	r3, #0
 80015d8:	607b      	str	r3, [r7, #4]
 80015da:	4b22      	ldr	r3, [pc, #136]	; (8001664 <MX_GPIO_Init+0xc0>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015de:	4a21      	ldr	r2, [pc, #132]	; (8001664 <MX_GPIO_Init+0xc0>)
 80015e0:	f043 0302 	orr.w	r3, r3, #2
 80015e4:	6313      	str	r3, [r2, #48]	; 0x30
 80015e6:	4b1f      	ldr	r3, [pc, #124]	; (8001664 <MX_GPIO_Init+0xc0>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	f003 0302 	and.w	r3, r3, #2
 80015ee:	607b      	str	r3, [r7, #4]
 80015f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80015f2:	2200      	movs	r2, #0
 80015f4:	f64f 013f 	movw	r1, #63551	; 0xf83f
 80015f8:	481b      	ldr	r0, [pc, #108]	; (8001668 <MX_GPIO_Init+0xc4>)
 80015fa:	f000 fc0f 	bl	8001e1c <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80015fe:	2200      	movs	r2, #0
 8001600:	2103      	movs	r1, #3
 8001602:	481a      	ldr	r0, [pc, #104]	; (800166c <MX_GPIO_Init+0xc8>)
 8001604:	f000 fc0a 	bl	8001e1c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA11 PA12
                           PA13 PA14 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001608:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800160c:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800160e:	2301      	movs	r3, #1
 8001610:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001612:	2300      	movs	r3, #0
 8001614:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001616:	2300      	movs	r3, #0
 8001618:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800161a:	f107 030c 	add.w	r3, r7, #12
 800161e:	4619      	mov	r1, r3
 8001620:	4811      	ldr	r0, [pc, #68]	; (8001668 <MX_GPIO_Init+0xc4>)
 8001622:	f000 fa5f 	bl	8001ae4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001626:	2303      	movs	r3, #3
 8001628:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800162a:	2301      	movs	r3, #1
 800162c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162e:	2300      	movs	r3, #0
 8001630:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001632:	2300      	movs	r3, #0
 8001634:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001636:	f107 030c 	add.w	r3, r7, #12
 800163a:	4619      	mov	r1, r3
 800163c:	480b      	ldr	r0, [pc, #44]	; (800166c <MX_GPIO_Init+0xc8>)
 800163e:	f000 fa51 	bl	8001ae4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB12 PB13 PB3
                           PB4 PB5 PB6 PB7
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_3
 8001642:	f243 73f8 	movw	r3, #14328	; 0x37f8
 8001646:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001648:	2300      	movs	r3, #0
 800164a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800164c:	2301      	movs	r3, #1
 800164e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001650:	f107 030c 	add.w	r3, r7, #12
 8001654:	4619      	mov	r1, r3
 8001656:	4805      	ldr	r0, [pc, #20]	; (800166c <MX_GPIO_Init+0xc8>)
 8001658:	f000 fa44 	bl	8001ae4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800165c:	bf00      	nop
 800165e:	3720      	adds	r7, #32
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	40023800 	.word	0x40023800
 8001668:	40020000 	.word	0x40020000
 800166c:	40020400 	.word	0x40020400

08001670 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001674:	b672      	cpsid	i
}
 8001676:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001678:	e7fe      	b.n	8001678 <Error_Handler+0x8>
	...

0800167c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001682:	2300      	movs	r3, #0
 8001684:	607b      	str	r3, [r7, #4]
 8001686:	4b10      	ldr	r3, [pc, #64]	; (80016c8 <HAL_MspInit+0x4c>)
 8001688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800168a:	4a0f      	ldr	r2, [pc, #60]	; (80016c8 <HAL_MspInit+0x4c>)
 800168c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001690:	6453      	str	r3, [r2, #68]	; 0x44
 8001692:	4b0d      	ldr	r3, [pc, #52]	; (80016c8 <HAL_MspInit+0x4c>)
 8001694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001696:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800169a:	607b      	str	r3, [r7, #4]
 800169c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800169e:	2300      	movs	r3, #0
 80016a0:	603b      	str	r3, [r7, #0]
 80016a2:	4b09      	ldr	r3, [pc, #36]	; (80016c8 <HAL_MspInit+0x4c>)
 80016a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a6:	4a08      	ldr	r2, [pc, #32]	; (80016c8 <HAL_MspInit+0x4c>)
 80016a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016ac:	6413      	str	r3, [r2, #64]	; 0x40
 80016ae:	4b06      	ldr	r3, [pc, #24]	; (80016c8 <HAL_MspInit+0x4c>)
 80016b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016b6:	603b      	str	r3, [r7, #0]
 80016b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016ba:	bf00      	nop
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	40023800 	.word	0x40023800

080016cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b085      	sub	sp, #20
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a0b      	ldr	r2, [pc, #44]	; (8001708 <HAL_TIM_Base_MspInit+0x3c>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d10d      	bne.n	80016fa <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80016de:	2300      	movs	r3, #0
 80016e0:	60fb      	str	r3, [r7, #12]
 80016e2:	4b0a      	ldr	r3, [pc, #40]	; (800170c <HAL_TIM_Base_MspInit+0x40>)
 80016e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e6:	4a09      	ldr	r2, [pc, #36]	; (800170c <HAL_TIM_Base_MspInit+0x40>)
 80016e8:	f043 0304 	orr.w	r3, r3, #4
 80016ec:	6413      	str	r3, [r2, #64]	; 0x40
 80016ee:	4b07      	ldr	r3, [pc, #28]	; (800170c <HAL_TIM_Base_MspInit+0x40>)
 80016f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f2:	f003 0304 	and.w	r3, r3, #4
 80016f6:	60fb      	str	r3, [r7, #12]
 80016f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80016fa:	bf00      	nop
 80016fc:	3714      	adds	r7, #20
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	40000800 	.word	0x40000800
 800170c:	40023800 	.word	0x40023800

08001710 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001714:	e7fe      	b.n	8001714 <NMI_Handler+0x4>

08001716 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001716:	b480      	push	{r7}
 8001718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800171a:	e7fe      	b.n	800171a <HardFault_Handler+0x4>

0800171c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001720:	e7fe      	b.n	8001720 <MemManage_Handler+0x4>

08001722 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001722:	b480      	push	{r7}
 8001724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001726:	e7fe      	b.n	8001726 <BusFault_Handler+0x4>

08001728 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800172c:	e7fe      	b.n	800172c <UsageFault_Handler+0x4>

0800172e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800172e:	b480      	push	{r7}
 8001730:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001732:	bf00      	nop
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001740:	bf00      	nop
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr

0800174a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800174a:	b480      	push	{r7}
 800174c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800174e:	bf00      	nop
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	/* Call update time every second */
	Clock_updateTime();
 800175c:	f7ff f98c 	bl	8000a78 <Clock_updateTime>
	/* check if alarm should ring */
	Alarm_Ring();
 8001760:	f7fe feb6 	bl	80004d0 <Alarm_Ring>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001764:	f000 f890 	bl	8001888 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001768:	bf00      	nop
 800176a:	bd80      	pop	{r7, pc}

0800176c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001770:	4b06      	ldr	r3, [pc, #24]	; (800178c <SystemInit+0x20>)
 8001772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001776:	4a05      	ldr	r2, [pc, #20]	; (800178c <SystemInit+0x20>)
 8001778:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800177c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001780:	bf00      	nop
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	e000ed00 	.word	0xe000ed00

08001790 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001790:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017c8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001794:	f7ff ffea 	bl	800176c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001798:	480c      	ldr	r0, [pc, #48]	; (80017cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800179a:	490d      	ldr	r1, [pc, #52]	; (80017d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800179c:	4a0d      	ldr	r2, [pc, #52]	; (80017d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800179e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017a0:	e002      	b.n	80017a8 <LoopCopyDataInit>

080017a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017a6:	3304      	adds	r3, #4

080017a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017ac:	d3f9      	bcc.n	80017a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017ae:	4a0a      	ldr	r2, [pc, #40]	; (80017d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017b0:	4c0a      	ldr	r4, [pc, #40]	; (80017dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80017b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017b4:	e001      	b.n	80017ba <LoopFillZerobss>

080017b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017b8:	3204      	adds	r2, #4

080017ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017bc:	d3fb      	bcc.n	80017b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017be:	f001 fa79 	bl	8002cb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017c2:	f7ff fdd9 	bl	8001378 <main>
  bx  lr    
 80017c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017c8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80017cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017d0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80017d4:	08002d34 	.word	0x08002d34
  ldr r2, =_sbss
 80017d8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80017dc:	20000080 	.word	0x20000080

080017e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017e0:	e7fe      	b.n	80017e0 <ADC_IRQHandler>
	...

080017e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017e8:	4b0e      	ldr	r3, [pc, #56]	; (8001824 <HAL_Init+0x40>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a0d      	ldr	r2, [pc, #52]	; (8001824 <HAL_Init+0x40>)
 80017ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017f4:	4b0b      	ldr	r3, [pc, #44]	; (8001824 <HAL_Init+0x40>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a0a      	ldr	r2, [pc, #40]	; (8001824 <HAL_Init+0x40>)
 80017fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001800:	4b08      	ldr	r3, [pc, #32]	; (8001824 <HAL_Init+0x40>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a07      	ldr	r2, [pc, #28]	; (8001824 <HAL_Init+0x40>)
 8001806:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800180a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800180c:	2003      	movs	r0, #3
 800180e:	f000 f919 	bl	8001a44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001812:	200f      	movs	r0, #15
 8001814:	f000 f808 	bl	8001828 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001818:	f7ff ff30 	bl	800167c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800181c:	2300      	movs	r3, #0
}
 800181e:	4618      	mov	r0, r3
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	40023c00 	.word	0x40023c00

08001828 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001830:	4b12      	ldr	r3, [pc, #72]	; (800187c <HAL_InitTick+0x54>)
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	4b12      	ldr	r3, [pc, #72]	; (8001880 <HAL_InitTick+0x58>)
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	4619      	mov	r1, r3
 800183a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800183e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001842:	fbb2 f3f3 	udiv	r3, r2, r3
 8001846:	4618      	mov	r0, r3
 8001848:	f000 f923 	bl	8001a92 <HAL_SYSTICK_Config>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e00e      	b.n	8001874 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2b0f      	cmp	r3, #15
 800185a:	d80a      	bhi.n	8001872 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800185c:	2200      	movs	r2, #0
 800185e:	6879      	ldr	r1, [r7, #4]
 8001860:	f04f 30ff 	mov.w	r0, #4294967295
 8001864:	f000 f8f9 	bl	8001a5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001868:	4a06      	ldr	r2, [pc, #24]	; (8001884 <HAL_InitTick+0x5c>)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800186e:	2300      	movs	r3, #0
 8001870:	e000      	b.n	8001874 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
}
 8001874:	4618      	mov	r0, r3
 8001876:	3708      	adds	r7, #8
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	20000004 	.word	0x20000004
 8001880:	2000000c 	.word	0x2000000c
 8001884:	20000008 	.word	0x20000008

08001888 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800188c:	4b06      	ldr	r3, [pc, #24]	; (80018a8 <HAL_IncTick+0x20>)
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	461a      	mov	r2, r3
 8001892:	4b06      	ldr	r3, [pc, #24]	; (80018ac <HAL_IncTick+0x24>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4413      	add	r3, r2
 8001898:	4a04      	ldr	r2, [pc, #16]	; (80018ac <HAL_IncTick+0x24>)
 800189a:	6013      	str	r3, [r2, #0]
}
 800189c:	bf00      	nop
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	2000000c 	.word	0x2000000c
 80018ac:	2000007c 	.word	0x2000007c

080018b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  return uwTick;
 80018b4:	4b03      	ldr	r3, [pc, #12]	; (80018c4 <HAL_GetTick+0x14>)
 80018b6:	681b      	ldr	r3, [r3, #0]
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	2000007c 	.word	0x2000007c

080018c8 <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  return uwTickFreq;
 80018cc:	4b03      	ldr	r3, [pc, #12]	; (80018dc <HAL_GetTickFreq+0x14>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	2000000c 	.word	0x2000000c

080018e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b085      	sub	sp, #20
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	f003 0307 	and.w	r3, r3, #7
 80018ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018f0:	4b0c      	ldr	r3, [pc, #48]	; (8001924 <__NVIC_SetPriorityGrouping+0x44>)
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018f6:	68ba      	ldr	r2, [r7, #8]
 80018f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018fc:	4013      	ands	r3, r2
 80018fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001908:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800190c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001910:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001912:	4a04      	ldr	r2, [pc, #16]	; (8001924 <__NVIC_SetPriorityGrouping+0x44>)
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	60d3      	str	r3, [r2, #12]
}
 8001918:	bf00      	nop
 800191a:	3714      	adds	r7, #20
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr
 8001924:	e000ed00 	.word	0xe000ed00

08001928 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800192c:	4b04      	ldr	r3, [pc, #16]	; (8001940 <__NVIC_GetPriorityGrouping+0x18>)
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	0a1b      	lsrs	r3, r3, #8
 8001932:	f003 0307 	and.w	r3, r3, #7
}
 8001936:	4618      	mov	r0, r3
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr
 8001940:	e000ed00 	.word	0xe000ed00

08001944 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	4603      	mov	r3, r0
 800194c:	6039      	str	r1, [r7, #0]
 800194e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001950:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001954:	2b00      	cmp	r3, #0
 8001956:	db0a      	blt.n	800196e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	b2da      	uxtb	r2, r3
 800195c:	490c      	ldr	r1, [pc, #48]	; (8001990 <__NVIC_SetPriority+0x4c>)
 800195e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001962:	0112      	lsls	r2, r2, #4
 8001964:	b2d2      	uxtb	r2, r2
 8001966:	440b      	add	r3, r1
 8001968:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800196c:	e00a      	b.n	8001984 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	b2da      	uxtb	r2, r3
 8001972:	4908      	ldr	r1, [pc, #32]	; (8001994 <__NVIC_SetPriority+0x50>)
 8001974:	79fb      	ldrb	r3, [r7, #7]
 8001976:	f003 030f 	and.w	r3, r3, #15
 800197a:	3b04      	subs	r3, #4
 800197c:	0112      	lsls	r2, r2, #4
 800197e:	b2d2      	uxtb	r2, r2
 8001980:	440b      	add	r3, r1
 8001982:	761a      	strb	r2, [r3, #24]
}
 8001984:	bf00      	nop
 8001986:	370c      	adds	r7, #12
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr
 8001990:	e000e100 	.word	0xe000e100
 8001994:	e000ed00 	.word	0xe000ed00

08001998 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001998:	b480      	push	{r7}
 800199a:	b089      	sub	sp, #36	; 0x24
 800199c:	af00      	add	r7, sp, #0
 800199e:	60f8      	str	r0, [r7, #12]
 80019a0:	60b9      	str	r1, [r7, #8]
 80019a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	f003 0307 	and.w	r3, r3, #7
 80019aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	f1c3 0307 	rsb	r3, r3, #7
 80019b2:	2b04      	cmp	r3, #4
 80019b4:	bf28      	it	cs
 80019b6:	2304      	movcs	r3, #4
 80019b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	3304      	adds	r3, #4
 80019be:	2b06      	cmp	r3, #6
 80019c0:	d902      	bls.n	80019c8 <NVIC_EncodePriority+0x30>
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	3b03      	subs	r3, #3
 80019c6:	e000      	b.n	80019ca <NVIC_EncodePriority+0x32>
 80019c8:	2300      	movs	r3, #0
 80019ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019cc:	f04f 32ff 	mov.w	r2, #4294967295
 80019d0:	69bb      	ldr	r3, [r7, #24]
 80019d2:	fa02 f303 	lsl.w	r3, r2, r3
 80019d6:	43da      	mvns	r2, r3
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	401a      	ands	r2, r3
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019e0:	f04f 31ff 	mov.w	r1, #4294967295
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	fa01 f303 	lsl.w	r3, r1, r3
 80019ea:	43d9      	mvns	r1, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019f0:	4313      	orrs	r3, r2
         );
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3724      	adds	r7, #36	; 0x24
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
	...

08001a00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	3b01      	subs	r3, #1
 8001a0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a10:	d301      	bcc.n	8001a16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a12:	2301      	movs	r3, #1
 8001a14:	e00f      	b.n	8001a36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a16:	4a0a      	ldr	r2, [pc, #40]	; (8001a40 <SysTick_Config+0x40>)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	3b01      	subs	r3, #1
 8001a1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a1e:	210f      	movs	r1, #15
 8001a20:	f04f 30ff 	mov.w	r0, #4294967295
 8001a24:	f7ff ff8e 	bl	8001944 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a28:	4b05      	ldr	r3, [pc, #20]	; (8001a40 <SysTick_Config+0x40>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a2e:	4b04      	ldr	r3, [pc, #16]	; (8001a40 <SysTick_Config+0x40>)
 8001a30:	2207      	movs	r2, #7
 8001a32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a34:	2300      	movs	r3, #0
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	e000e010 	.word	0xe000e010

08001a44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f7ff ff47 	bl	80018e0 <__NVIC_SetPriorityGrouping>
}
 8001a52:	bf00      	nop
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}

08001a5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	b086      	sub	sp, #24
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	4603      	mov	r3, r0
 8001a62:	60b9      	str	r1, [r7, #8]
 8001a64:	607a      	str	r2, [r7, #4]
 8001a66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a6c:	f7ff ff5c 	bl	8001928 <__NVIC_GetPriorityGrouping>
 8001a70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a72:	687a      	ldr	r2, [r7, #4]
 8001a74:	68b9      	ldr	r1, [r7, #8]
 8001a76:	6978      	ldr	r0, [r7, #20]
 8001a78:	f7ff ff8e 	bl	8001998 <NVIC_EncodePriority>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a82:	4611      	mov	r1, r2
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7ff ff5d 	bl	8001944 <__NVIC_SetPriority>
}
 8001a8a:	bf00      	nop
 8001a8c:	3718      	adds	r7, #24
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b082      	sub	sp, #8
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f7ff ffb0 	bl	8001a00 <SysTick_Config>
 8001aa0:	4603      	mov	r3, r0
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3708      	adds	r7, #8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
	...

08001aac <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2b04      	cmp	r3, #4
 8001ab8:	d106      	bne.n	8001ac8 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001aba:	4b09      	ldr	r3, [pc, #36]	; (8001ae0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a08      	ldr	r2, [pc, #32]	; (8001ae0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001ac0:	f043 0304 	orr.w	r3, r3, #4
 8001ac4:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8001ac6:	e005      	b.n	8001ad4 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001ac8:	4b05      	ldr	r3, [pc, #20]	; (8001ae0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a04      	ldr	r2, [pc, #16]	; (8001ae0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001ace:	f023 0304 	bic.w	r3, r3, #4
 8001ad2:	6013      	str	r3, [r2, #0]
}
 8001ad4:	bf00      	nop
 8001ad6:	370c      	adds	r7, #12
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr
 8001ae0:	e000e010 	.word	0xe000e010

08001ae4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b089      	sub	sp, #36	; 0x24
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001aee:	2300      	movs	r3, #0
 8001af0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001af2:	2300      	movs	r3, #0
 8001af4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001af6:	2300      	movs	r3, #0
 8001af8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001afa:	2300      	movs	r3, #0
 8001afc:	61fb      	str	r3, [r7, #28]
 8001afe:	e159      	b.n	8001db4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b00:	2201      	movs	r2, #1
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	697a      	ldr	r2, [r7, #20]
 8001b10:	4013      	ands	r3, r2
 8001b12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b14:	693a      	ldr	r2, [r7, #16]
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	f040 8148 	bne.w	8001dae <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f003 0303 	and.w	r3, r3, #3
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d005      	beq.n	8001b36 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d130      	bne.n	8001b98 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	005b      	lsls	r3, r3, #1
 8001b40:	2203      	movs	r2, #3
 8001b42:	fa02 f303 	lsl.w	r3, r2, r3
 8001b46:	43db      	mvns	r3, r3
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	68da      	ldr	r2, [r3, #12]
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5a:	69ba      	ldr	r2, [r7, #24]
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	69ba      	ldr	r2, [r7, #24]
 8001b64:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	fa02 f303 	lsl.w	r3, r2, r3
 8001b74:	43db      	mvns	r3, r3
 8001b76:	69ba      	ldr	r2, [r7, #24]
 8001b78:	4013      	ands	r3, r2
 8001b7a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	091b      	lsrs	r3, r3, #4
 8001b82:	f003 0201 	and.w	r2, r3, #1
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f003 0303 	and.w	r3, r3, #3
 8001ba0:	2b03      	cmp	r3, #3
 8001ba2:	d017      	beq.n	8001bd4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	005b      	lsls	r3, r3, #1
 8001bae:	2203      	movs	r2, #3
 8001bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb4:	43db      	mvns	r3, r3
 8001bb6:	69ba      	ldr	r2, [r7, #24]
 8001bb8:	4013      	ands	r3, r2
 8001bba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	689a      	ldr	r2, [r3, #8]
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	005b      	lsls	r3, r3, #1
 8001bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc8:	69ba      	ldr	r2, [r7, #24]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f003 0303 	and.w	r3, r3, #3
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d123      	bne.n	8001c28 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	08da      	lsrs	r2, r3, #3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	3208      	adds	r2, #8
 8001be8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	f003 0307 	and.w	r3, r3, #7
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	220f      	movs	r2, #15
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	43db      	mvns	r3, r3
 8001bfe:	69ba      	ldr	r2, [r7, #24]
 8001c00:	4013      	ands	r3, r2
 8001c02:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	691a      	ldr	r2, [r3, #16]
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	f003 0307 	and.w	r3, r3, #7
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	fa02 f303 	lsl.w	r3, r2, r3
 8001c14:	69ba      	ldr	r2, [r7, #24]
 8001c16:	4313      	orrs	r3, r2
 8001c18:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	08da      	lsrs	r2, r3, #3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	3208      	adds	r2, #8
 8001c22:	69b9      	ldr	r1, [r7, #24]
 8001c24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	005b      	lsls	r3, r3, #1
 8001c32:	2203      	movs	r2, #3
 8001c34:	fa02 f303 	lsl.w	r3, r2, r3
 8001c38:	43db      	mvns	r3, r3
 8001c3a:	69ba      	ldr	r2, [r7, #24]
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f003 0203 	and.w	r2, r3, #3
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	005b      	lsls	r3, r3, #1
 8001c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	4313      	orrs	r3, r2
 8001c54:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	f000 80a2 	beq.w	8001dae <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	60fb      	str	r3, [r7, #12]
 8001c6e:	4b57      	ldr	r3, [pc, #348]	; (8001dcc <HAL_GPIO_Init+0x2e8>)
 8001c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c72:	4a56      	ldr	r2, [pc, #344]	; (8001dcc <HAL_GPIO_Init+0x2e8>)
 8001c74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c78:	6453      	str	r3, [r2, #68]	; 0x44
 8001c7a:	4b54      	ldr	r3, [pc, #336]	; (8001dcc <HAL_GPIO_Init+0x2e8>)
 8001c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c82:	60fb      	str	r3, [r7, #12]
 8001c84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c86:	4a52      	ldr	r2, [pc, #328]	; (8001dd0 <HAL_GPIO_Init+0x2ec>)
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	089b      	lsrs	r3, r3, #2
 8001c8c:	3302      	adds	r3, #2
 8001c8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	f003 0303 	and.w	r3, r3, #3
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	220f      	movs	r2, #15
 8001c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca2:	43db      	mvns	r3, r3
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4a49      	ldr	r2, [pc, #292]	; (8001dd4 <HAL_GPIO_Init+0x2f0>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d019      	beq.n	8001ce6 <HAL_GPIO_Init+0x202>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4a48      	ldr	r2, [pc, #288]	; (8001dd8 <HAL_GPIO_Init+0x2f4>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d013      	beq.n	8001ce2 <HAL_GPIO_Init+0x1fe>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4a47      	ldr	r2, [pc, #284]	; (8001ddc <HAL_GPIO_Init+0x2f8>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d00d      	beq.n	8001cde <HAL_GPIO_Init+0x1fa>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4a46      	ldr	r2, [pc, #280]	; (8001de0 <HAL_GPIO_Init+0x2fc>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d007      	beq.n	8001cda <HAL_GPIO_Init+0x1f6>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4a45      	ldr	r2, [pc, #276]	; (8001de4 <HAL_GPIO_Init+0x300>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d101      	bne.n	8001cd6 <HAL_GPIO_Init+0x1f2>
 8001cd2:	2304      	movs	r3, #4
 8001cd4:	e008      	b.n	8001ce8 <HAL_GPIO_Init+0x204>
 8001cd6:	2307      	movs	r3, #7
 8001cd8:	e006      	b.n	8001ce8 <HAL_GPIO_Init+0x204>
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e004      	b.n	8001ce8 <HAL_GPIO_Init+0x204>
 8001cde:	2302      	movs	r3, #2
 8001ce0:	e002      	b.n	8001ce8 <HAL_GPIO_Init+0x204>
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e000      	b.n	8001ce8 <HAL_GPIO_Init+0x204>
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	69fa      	ldr	r2, [r7, #28]
 8001cea:	f002 0203 	and.w	r2, r2, #3
 8001cee:	0092      	lsls	r2, r2, #2
 8001cf0:	4093      	lsls	r3, r2
 8001cf2:	69ba      	ldr	r2, [r7, #24]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cf8:	4935      	ldr	r1, [pc, #212]	; (8001dd0 <HAL_GPIO_Init+0x2ec>)
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	089b      	lsrs	r3, r3, #2
 8001cfe:	3302      	adds	r3, #2
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d06:	4b38      	ldr	r3, [pc, #224]	; (8001de8 <HAL_GPIO_Init+0x304>)
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	43db      	mvns	r3, r3
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	4013      	ands	r3, r2
 8001d14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d003      	beq.n	8001d2a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001d22:	69ba      	ldr	r2, [r7, #24]
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d2a:	4a2f      	ldr	r2, [pc, #188]	; (8001de8 <HAL_GPIO_Init+0x304>)
 8001d2c:	69bb      	ldr	r3, [r7, #24]
 8001d2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d30:	4b2d      	ldr	r3, [pc, #180]	; (8001de8 <HAL_GPIO_Init+0x304>)
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	43db      	mvns	r3, r3
 8001d3a:	69ba      	ldr	r2, [r7, #24]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d003      	beq.n	8001d54 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d54:	4a24      	ldr	r2, [pc, #144]	; (8001de8 <HAL_GPIO_Init+0x304>)
 8001d56:	69bb      	ldr	r3, [r7, #24]
 8001d58:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d5a:	4b23      	ldr	r3, [pc, #140]	; (8001de8 <HAL_GPIO_Init+0x304>)
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	43db      	mvns	r3, r3
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	4013      	ands	r3, r2
 8001d68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d003      	beq.n	8001d7e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001d76:	69ba      	ldr	r2, [r7, #24]
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d7e:	4a1a      	ldr	r2, [pc, #104]	; (8001de8 <HAL_GPIO_Init+0x304>)
 8001d80:	69bb      	ldr	r3, [r7, #24]
 8001d82:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d84:	4b18      	ldr	r3, [pc, #96]	; (8001de8 <HAL_GPIO_Init+0x304>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	43db      	mvns	r3, r3
 8001d8e:	69ba      	ldr	r2, [r7, #24]
 8001d90:	4013      	ands	r3, r2
 8001d92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d003      	beq.n	8001da8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001da8:	4a0f      	ldr	r2, [pc, #60]	; (8001de8 <HAL_GPIO_Init+0x304>)
 8001daa:	69bb      	ldr	r3, [r7, #24]
 8001dac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	3301      	adds	r3, #1
 8001db2:	61fb      	str	r3, [r7, #28]
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	2b0f      	cmp	r3, #15
 8001db8:	f67f aea2 	bls.w	8001b00 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001dbc:	bf00      	nop
 8001dbe:	bf00      	nop
 8001dc0:	3724      	adds	r7, #36	; 0x24
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	40023800 	.word	0x40023800
 8001dd0:	40013800 	.word	0x40013800
 8001dd4:	40020000 	.word	0x40020000
 8001dd8:	40020400 	.word	0x40020400
 8001ddc:	40020800 	.word	0x40020800
 8001de0:	40020c00 	.word	0x40020c00
 8001de4:	40021000 	.word	0x40021000
 8001de8:	40013c00 	.word	0x40013c00

08001dec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b085      	sub	sp, #20
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	460b      	mov	r3, r1
 8001df6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	691a      	ldr	r2, [r3, #16]
 8001dfc:	887b      	ldrh	r3, [r7, #2]
 8001dfe:	4013      	ands	r3, r2
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d002      	beq.n	8001e0a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e04:	2301      	movs	r3, #1
 8001e06:	73fb      	strb	r3, [r7, #15]
 8001e08:	e001      	b.n	8001e0e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3714      	adds	r7, #20
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr

08001e1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	460b      	mov	r3, r1
 8001e26:	807b      	strh	r3, [r7, #2]
 8001e28:	4613      	mov	r3, r2
 8001e2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e2c:	787b      	ldrb	r3, [r7, #1]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d003      	beq.n	8001e3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e32:	887a      	ldrh	r2, [r7, #2]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e38:	e003      	b.n	8001e42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e3a:	887b      	ldrh	r3, [r7, #2]
 8001e3c:	041a      	lsls	r2, r3, #16
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	619a      	str	r2, [r3, #24]
}
 8001e42:	bf00      	nop
 8001e44:	370c      	adds	r7, #12
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
	...

08001e50 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b086      	sub	sp, #24
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d101      	bne.n	8001e62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e267      	b.n	8002332 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0301 	and.w	r3, r3, #1
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d075      	beq.n	8001f5a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001e6e:	4b88      	ldr	r3, [pc, #544]	; (8002090 <HAL_RCC_OscConfig+0x240>)
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	f003 030c 	and.w	r3, r3, #12
 8001e76:	2b04      	cmp	r3, #4
 8001e78:	d00c      	beq.n	8001e94 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e7a:	4b85      	ldr	r3, [pc, #532]	; (8002090 <HAL_RCC_OscConfig+0x240>)
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001e82:	2b08      	cmp	r3, #8
 8001e84:	d112      	bne.n	8001eac <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e86:	4b82      	ldr	r3, [pc, #520]	; (8002090 <HAL_RCC_OscConfig+0x240>)
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e92:	d10b      	bne.n	8001eac <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e94:	4b7e      	ldr	r3, [pc, #504]	; (8002090 <HAL_RCC_OscConfig+0x240>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d05b      	beq.n	8001f58 <HAL_RCC_OscConfig+0x108>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d157      	bne.n	8001f58 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e242      	b.n	8002332 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eb4:	d106      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x74>
 8001eb6:	4b76      	ldr	r3, [pc, #472]	; (8002090 <HAL_RCC_OscConfig+0x240>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a75      	ldr	r2, [pc, #468]	; (8002090 <HAL_RCC_OscConfig+0x240>)
 8001ebc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ec0:	6013      	str	r3, [r2, #0]
 8001ec2:	e01d      	b.n	8001f00 <HAL_RCC_OscConfig+0xb0>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ecc:	d10c      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x98>
 8001ece:	4b70      	ldr	r3, [pc, #448]	; (8002090 <HAL_RCC_OscConfig+0x240>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a6f      	ldr	r2, [pc, #444]	; (8002090 <HAL_RCC_OscConfig+0x240>)
 8001ed4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ed8:	6013      	str	r3, [r2, #0]
 8001eda:	4b6d      	ldr	r3, [pc, #436]	; (8002090 <HAL_RCC_OscConfig+0x240>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a6c      	ldr	r2, [pc, #432]	; (8002090 <HAL_RCC_OscConfig+0x240>)
 8001ee0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ee4:	6013      	str	r3, [r2, #0]
 8001ee6:	e00b      	b.n	8001f00 <HAL_RCC_OscConfig+0xb0>
 8001ee8:	4b69      	ldr	r3, [pc, #420]	; (8002090 <HAL_RCC_OscConfig+0x240>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a68      	ldr	r2, [pc, #416]	; (8002090 <HAL_RCC_OscConfig+0x240>)
 8001eee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ef2:	6013      	str	r3, [r2, #0]
 8001ef4:	4b66      	ldr	r3, [pc, #408]	; (8002090 <HAL_RCC_OscConfig+0x240>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a65      	ldr	r2, [pc, #404]	; (8002090 <HAL_RCC_OscConfig+0x240>)
 8001efa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001efe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d013      	beq.n	8001f30 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f08:	f7ff fcd2 	bl	80018b0 <HAL_GetTick>
 8001f0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f0e:	e008      	b.n	8001f22 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f10:	f7ff fcce 	bl	80018b0 <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2b64      	cmp	r3, #100	; 0x64
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e207      	b.n	8002332 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f22:	4b5b      	ldr	r3, [pc, #364]	; (8002090 <HAL_RCC_OscConfig+0x240>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d0f0      	beq.n	8001f10 <HAL_RCC_OscConfig+0xc0>
 8001f2e:	e014      	b.n	8001f5a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f30:	f7ff fcbe 	bl	80018b0 <HAL_GetTick>
 8001f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f36:	e008      	b.n	8001f4a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f38:	f7ff fcba 	bl	80018b0 <HAL_GetTick>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	2b64      	cmp	r3, #100	; 0x64
 8001f44:	d901      	bls.n	8001f4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f46:	2303      	movs	r3, #3
 8001f48:	e1f3      	b.n	8002332 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f4a:	4b51      	ldr	r3, [pc, #324]	; (8002090 <HAL_RCC_OscConfig+0x240>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d1f0      	bne.n	8001f38 <HAL_RCC_OscConfig+0xe8>
 8001f56:	e000      	b.n	8001f5a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0302 	and.w	r3, r3, #2
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d063      	beq.n	800202e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001f66:	4b4a      	ldr	r3, [pc, #296]	; (8002090 <HAL_RCC_OscConfig+0x240>)
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	f003 030c 	and.w	r3, r3, #12
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d00b      	beq.n	8001f8a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f72:	4b47      	ldr	r3, [pc, #284]	; (8002090 <HAL_RCC_OscConfig+0x240>)
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001f7a:	2b08      	cmp	r3, #8
 8001f7c:	d11c      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f7e:	4b44      	ldr	r3, [pc, #272]	; (8002090 <HAL_RCC_OscConfig+0x240>)
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d116      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f8a:	4b41      	ldr	r3, [pc, #260]	; (8002090 <HAL_RCC_OscConfig+0x240>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0302 	and.w	r3, r3, #2
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d005      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x152>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	68db      	ldr	r3, [r3, #12]
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d001      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e1c7      	b.n	8002332 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fa2:	4b3b      	ldr	r3, [pc, #236]	; (8002090 <HAL_RCC_OscConfig+0x240>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	691b      	ldr	r3, [r3, #16]
 8001fae:	00db      	lsls	r3, r3, #3
 8001fb0:	4937      	ldr	r1, [pc, #220]	; (8002090 <HAL_RCC_OscConfig+0x240>)
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fb6:	e03a      	b.n	800202e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d020      	beq.n	8002002 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fc0:	4b34      	ldr	r3, [pc, #208]	; (8002094 <HAL_RCC_OscConfig+0x244>)
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc6:	f7ff fc73 	bl	80018b0 <HAL_GetTick>
 8001fca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fcc:	e008      	b.n	8001fe0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fce:	f7ff fc6f 	bl	80018b0 <HAL_GetTick>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d901      	bls.n	8001fe0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e1a8      	b.n	8002332 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fe0:	4b2b      	ldr	r3, [pc, #172]	; (8002090 <HAL_RCC_OscConfig+0x240>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0302 	and.w	r3, r3, #2
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d0f0      	beq.n	8001fce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fec:	4b28      	ldr	r3, [pc, #160]	; (8002090 <HAL_RCC_OscConfig+0x240>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	691b      	ldr	r3, [r3, #16]
 8001ff8:	00db      	lsls	r3, r3, #3
 8001ffa:	4925      	ldr	r1, [pc, #148]	; (8002090 <HAL_RCC_OscConfig+0x240>)
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	600b      	str	r3, [r1, #0]
 8002000:	e015      	b.n	800202e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002002:	4b24      	ldr	r3, [pc, #144]	; (8002094 <HAL_RCC_OscConfig+0x244>)
 8002004:	2200      	movs	r2, #0
 8002006:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002008:	f7ff fc52 	bl	80018b0 <HAL_GetTick>
 800200c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800200e:	e008      	b.n	8002022 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002010:	f7ff fc4e 	bl	80018b0 <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	2b02      	cmp	r3, #2
 800201c:	d901      	bls.n	8002022 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e187      	b.n	8002332 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002022:	4b1b      	ldr	r3, [pc, #108]	; (8002090 <HAL_RCC_OscConfig+0x240>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0302 	and.w	r3, r3, #2
 800202a:	2b00      	cmp	r3, #0
 800202c:	d1f0      	bne.n	8002010 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0308 	and.w	r3, r3, #8
 8002036:	2b00      	cmp	r3, #0
 8002038:	d036      	beq.n	80020a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	695b      	ldr	r3, [r3, #20]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d016      	beq.n	8002070 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002042:	4b15      	ldr	r3, [pc, #84]	; (8002098 <HAL_RCC_OscConfig+0x248>)
 8002044:	2201      	movs	r2, #1
 8002046:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002048:	f7ff fc32 	bl	80018b0 <HAL_GetTick>
 800204c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800204e:	e008      	b.n	8002062 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002050:	f7ff fc2e 	bl	80018b0 <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	2b02      	cmp	r3, #2
 800205c:	d901      	bls.n	8002062 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e167      	b.n	8002332 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002062:	4b0b      	ldr	r3, [pc, #44]	; (8002090 <HAL_RCC_OscConfig+0x240>)
 8002064:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002066:	f003 0302 	and.w	r3, r3, #2
 800206a:	2b00      	cmp	r3, #0
 800206c:	d0f0      	beq.n	8002050 <HAL_RCC_OscConfig+0x200>
 800206e:	e01b      	b.n	80020a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002070:	4b09      	ldr	r3, [pc, #36]	; (8002098 <HAL_RCC_OscConfig+0x248>)
 8002072:	2200      	movs	r2, #0
 8002074:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002076:	f7ff fc1b 	bl	80018b0 <HAL_GetTick>
 800207a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800207c:	e00e      	b.n	800209c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800207e:	f7ff fc17 	bl	80018b0 <HAL_GetTick>
 8002082:	4602      	mov	r2, r0
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	2b02      	cmp	r3, #2
 800208a:	d907      	bls.n	800209c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800208c:	2303      	movs	r3, #3
 800208e:	e150      	b.n	8002332 <HAL_RCC_OscConfig+0x4e2>
 8002090:	40023800 	.word	0x40023800
 8002094:	42470000 	.word	0x42470000
 8002098:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800209c:	4b88      	ldr	r3, [pc, #544]	; (80022c0 <HAL_RCC_OscConfig+0x470>)
 800209e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020a0:	f003 0302 	and.w	r3, r3, #2
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d1ea      	bne.n	800207e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0304 	and.w	r3, r3, #4
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	f000 8097 	beq.w	80021e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020b6:	2300      	movs	r3, #0
 80020b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020ba:	4b81      	ldr	r3, [pc, #516]	; (80022c0 <HAL_RCC_OscConfig+0x470>)
 80020bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d10f      	bne.n	80020e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020c6:	2300      	movs	r3, #0
 80020c8:	60bb      	str	r3, [r7, #8]
 80020ca:	4b7d      	ldr	r3, [pc, #500]	; (80022c0 <HAL_RCC_OscConfig+0x470>)
 80020cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ce:	4a7c      	ldr	r2, [pc, #496]	; (80022c0 <HAL_RCC_OscConfig+0x470>)
 80020d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020d4:	6413      	str	r3, [r2, #64]	; 0x40
 80020d6:	4b7a      	ldr	r3, [pc, #488]	; (80022c0 <HAL_RCC_OscConfig+0x470>)
 80020d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020de:	60bb      	str	r3, [r7, #8]
 80020e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020e2:	2301      	movs	r3, #1
 80020e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020e6:	4b77      	ldr	r3, [pc, #476]	; (80022c4 <HAL_RCC_OscConfig+0x474>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d118      	bne.n	8002124 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020f2:	4b74      	ldr	r3, [pc, #464]	; (80022c4 <HAL_RCC_OscConfig+0x474>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a73      	ldr	r2, [pc, #460]	; (80022c4 <HAL_RCC_OscConfig+0x474>)
 80020f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020fe:	f7ff fbd7 	bl	80018b0 <HAL_GetTick>
 8002102:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002104:	e008      	b.n	8002118 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002106:	f7ff fbd3 	bl	80018b0 <HAL_GetTick>
 800210a:	4602      	mov	r2, r0
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	2b02      	cmp	r3, #2
 8002112:	d901      	bls.n	8002118 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002114:	2303      	movs	r3, #3
 8002116:	e10c      	b.n	8002332 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002118:	4b6a      	ldr	r3, [pc, #424]	; (80022c4 <HAL_RCC_OscConfig+0x474>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002120:	2b00      	cmp	r3, #0
 8002122:	d0f0      	beq.n	8002106 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	2b01      	cmp	r3, #1
 800212a:	d106      	bne.n	800213a <HAL_RCC_OscConfig+0x2ea>
 800212c:	4b64      	ldr	r3, [pc, #400]	; (80022c0 <HAL_RCC_OscConfig+0x470>)
 800212e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002130:	4a63      	ldr	r2, [pc, #396]	; (80022c0 <HAL_RCC_OscConfig+0x470>)
 8002132:	f043 0301 	orr.w	r3, r3, #1
 8002136:	6713      	str	r3, [r2, #112]	; 0x70
 8002138:	e01c      	b.n	8002174 <HAL_RCC_OscConfig+0x324>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	2b05      	cmp	r3, #5
 8002140:	d10c      	bne.n	800215c <HAL_RCC_OscConfig+0x30c>
 8002142:	4b5f      	ldr	r3, [pc, #380]	; (80022c0 <HAL_RCC_OscConfig+0x470>)
 8002144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002146:	4a5e      	ldr	r2, [pc, #376]	; (80022c0 <HAL_RCC_OscConfig+0x470>)
 8002148:	f043 0304 	orr.w	r3, r3, #4
 800214c:	6713      	str	r3, [r2, #112]	; 0x70
 800214e:	4b5c      	ldr	r3, [pc, #368]	; (80022c0 <HAL_RCC_OscConfig+0x470>)
 8002150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002152:	4a5b      	ldr	r2, [pc, #364]	; (80022c0 <HAL_RCC_OscConfig+0x470>)
 8002154:	f043 0301 	orr.w	r3, r3, #1
 8002158:	6713      	str	r3, [r2, #112]	; 0x70
 800215a:	e00b      	b.n	8002174 <HAL_RCC_OscConfig+0x324>
 800215c:	4b58      	ldr	r3, [pc, #352]	; (80022c0 <HAL_RCC_OscConfig+0x470>)
 800215e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002160:	4a57      	ldr	r2, [pc, #348]	; (80022c0 <HAL_RCC_OscConfig+0x470>)
 8002162:	f023 0301 	bic.w	r3, r3, #1
 8002166:	6713      	str	r3, [r2, #112]	; 0x70
 8002168:	4b55      	ldr	r3, [pc, #340]	; (80022c0 <HAL_RCC_OscConfig+0x470>)
 800216a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800216c:	4a54      	ldr	r2, [pc, #336]	; (80022c0 <HAL_RCC_OscConfig+0x470>)
 800216e:	f023 0304 	bic.w	r3, r3, #4
 8002172:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d015      	beq.n	80021a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800217c:	f7ff fb98 	bl	80018b0 <HAL_GetTick>
 8002180:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002182:	e00a      	b.n	800219a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002184:	f7ff fb94 	bl	80018b0 <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002192:	4293      	cmp	r3, r2
 8002194:	d901      	bls.n	800219a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e0cb      	b.n	8002332 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800219a:	4b49      	ldr	r3, [pc, #292]	; (80022c0 <HAL_RCC_OscConfig+0x470>)
 800219c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800219e:	f003 0302 	and.w	r3, r3, #2
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d0ee      	beq.n	8002184 <HAL_RCC_OscConfig+0x334>
 80021a6:	e014      	b.n	80021d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021a8:	f7ff fb82 	bl	80018b0 <HAL_GetTick>
 80021ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021ae:	e00a      	b.n	80021c6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021b0:	f7ff fb7e 	bl	80018b0 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80021be:	4293      	cmp	r3, r2
 80021c0:	d901      	bls.n	80021c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e0b5      	b.n	8002332 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021c6:	4b3e      	ldr	r3, [pc, #248]	; (80022c0 <HAL_RCC_OscConfig+0x470>)
 80021c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ca:	f003 0302 	and.w	r3, r3, #2
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d1ee      	bne.n	80021b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80021d2:	7dfb      	ldrb	r3, [r7, #23]
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d105      	bne.n	80021e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021d8:	4b39      	ldr	r3, [pc, #228]	; (80022c0 <HAL_RCC_OscConfig+0x470>)
 80021da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021dc:	4a38      	ldr	r2, [pc, #224]	; (80022c0 <HAL_RCC_OscConfig+0x470>)
 80021de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021e2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	699b      	ldr	r3, [r3, #24]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	f000 80a1 	beq.w	8002330 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021ee:	4b34      	ldr	r3, [pc, #208]	; (80022c0 <HAL_RCC_OscConfig+0x470>)
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	f003 030c 	and.w	r3, r3, #12
 80021f6:	2b08      	cmp	r3, #8
 80021f8:	d05c      	beq.n	80022b4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	699b      	ldr	r3, [r3, #24]
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d141      	bne.n	8002286 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002202:	4b31      	ldr	r3, [pc, #196]	; (80022c8 <HAL_RCC_OscConfig+0x478>)
 8002204:	2200      	movs	r2, #0
 8002206:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002208:	f7ff fb52 	bl	80018b0 <HAL_GetTick>
 800220c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800220e:	e008      	b.n	8002222 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002210:	f7ff fb4e 	bl	80018b0 <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	2b02      	cmp	r3, #2
 800221c:	d901      	bls.n	8002222 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e087      	b.n	8002332 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002222:	4b27      	ldr	r3, [pc, #156]	; (80022c0 <HAL_RCC_OscConfig+0x470>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d1f0      	bne.n	8002210 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	69da      	ldr	r2, [r3, #28]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6a1b      	ldr	r3, [r3, #32]
 8002236:	431a      	orrs	r2, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223c:	019b      	lsls	r3, r3, #6
 800223e:	431a      	orrs	r2, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002244:	085b      	lsrs	r3, r3, #1
 8002246:	3b01      	subs	r3, #1
 8002248:	041b      	lsls	r3, r3, #16
 800224a:	431a      	orrs	r2, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002250:	061b      	lsls	r3, r3, #24
 8002252:	491b      	ldr	r1, [pc, #108]	; (80022c0 <HAL_RCC_OscConfig+0x470>)
 8002254:	4313      	orrs	r3, r2
 8002256:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002258:	4b1b      	ldr	r3, [pc, #108]	; (80022c8 <HAL_RCC_OscConfig+0x478>)
 800225a:	2201      	movs	r2, #1
 800225c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800225e:	f7ff fb27 	bl	80018b0 <HAL_GetTick>
 8002262:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002264:	e008      	b.n	8002278 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002266:	f7ff fb23 	bl	80018b0 <HAL_GetTick>
 800226a:	4602      	mov	r2, r0
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	2b02      	cmp	r3, #2
 8002272:	d901      	bls.n	8002278 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e05c      	b.n	8002332 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002278:	4b11      	ldr	r3, [pc, #68]	; (80022c0 <HAL_RCC_OscConfig+0x470>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d0f0      	beq.n	8002266 <HAL_RCC_OscConfig+0x416>
 8002284:	e054      	b.n	8002330 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002286:	4b10      	ldr	r3, [pc, #64]	; (80022c8 <HAL_RCC_OscConfig+0x478>)
 8002288:	2200      	movs	r2, #0
 800228a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800228c:	f7ff fb10 	bl	80018b0 <HAL_GetTick>
 8002290:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002292:	e008      	b.n	80022a6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002294:	f7ff fb0c 	bl	80018b0 <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d901      	bls.n	80022a6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e045      	b.n	8002332 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022a6:	4b06      	ldr	r3, [pc, #24]	; (80022c0 <HAL_RCC_OscConfig+0x470>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d1f0      	bne.n	8002294 <HAL_RCC_OscConfig+0x444>
 80022b2:	e03d      	b.n	8002330 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	699b      	ldr	r3, [r3, #24]
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d107      	bne.n	80022cc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e038      	b.n	8002332 <HAL_RCC_OscConfig+0x4e2>
 80022c0:	40023800 	.word	0x40023800
 80022c4:	40007000 	.word	0x40007000
 80022c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80022cc:	4b1b      	ldr	r3, [pc, #108]	; (800233c <HAL_RCC_OscConfig+0x4ec>)
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	699b      	ldr	r3, [r3, #24]
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d028      	beq.n	800232c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d121      	bne.n	800232c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d11a      	bne.n	800232c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022f6:	68fa      	ldr	r2, [r7, #12]
 80022f8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80022fc:	4013      	ands	r3, r2
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002302:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002304:	4293      	cmp	r3, r2
 8002306:	d111      	bne.n	800232c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002312:	085b      	lsrs	r3, r3, #1
 8002314:	3b01      	subs	r3, #1
 8002316:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002318:	429a      	cmp	r2, r3
 800231a:	d107      	bne.n	800232c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002326:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002328:	429a      	cmp	r2, r3
 800232a:	d001      	beq.n	8002330 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e000      	b.n	8002332 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	3718      	adds	r7, #24
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	40023800 	.word	0x40023800

08002340 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d101      	bne.n	8002354 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e0cc      	b.n	80024ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002354:	4b68      	ldr	r3, [pc, #416]	; (80024f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0307 	and.w	r3, r3, #7
 800235c:	683a      	ldr	r2, [r7, #0]
 800235e:	429a      	cmp	r2, r3
 8002360:	d90c      	bls.n	800237c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002362:	4b65      	ldr	r3, [pc, #404]	; (80024f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002364:	683a      	ldr	r2, [r7, #0]
 8002366:	b2d2      	uxtb	r2, r2
 8002368:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800236a:	4b63      	ldr	r3, [pc, #396]	; (80024f8 <HAL_RCC_ClockConfig+0x1b8>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0307 	and.w	r3, r3, #7
 8002372:	683a      	ldr	r2, [r7, #0]
 8002374:	429a      	cmp	r2, r3
 8002376:	d001      	beq.n	800237c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e0b8      	b.n	80024ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0302 	and.w	r3, r3, #2
 8002384:	2b00      	cmp	r3, #0
 8002386:	d020      	beq.n	80023ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0304 	and.w	r3, r3, #4
 8002390:	2b00      	cmp	r3, #0
 8002392:	d005      	beq.n	80023a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002394:	4b59      	ldr	r3, [pc, #356]	; (80024fc <HAL_RCC_ClockConfig+0x1bc>)
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	4a58      	ldr	r2, [pc, #352]	; (80024fc <HAL_RCC_ClockConfig+0x1bc>)
 800239a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800239e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0308 	and.w	r3, r3, #8
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d005      	beq.n	80023b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023ac:	4b53      	ldr	r3, [pc, #332]	; (80024fc <HAL_RCC_ClockConfig+0x1bc>)
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	4a52      	ldr	r2, [pc, #328]	; (80024fc <HAL_RCC_ClockConfig+0x1bc>)
 80023b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80023b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023b8:	4b50      	ldr	r3, [pc, #320]	; (80024fc <HAL_RCC_ClockConfig+0x1bc>)
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	494d      	ldr	r1, [pc, #308]	; (80024fc <HAL_RCC_ClockConfig+0x1bc>)
 80023c6:	4313      	orrs	r3, r2
 80023c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0301 	and.w	r3, r3, #1
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d044      	beq.n	8002460 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d107      	bne.n	80023ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023de:	4b47      	ldr	r3, [pc, #284]	; (80024fc <HAL_RCC_ClockConfig+0x1bc>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d119      	bne.n	800241e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e07f      	b.n	80024ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d003      	beq.n	80023fe <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023fa:	2b03      	cmp	r3, #3
 80023fc:	d107      	bne.n	800240e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023fe:	4b3f      	ldr	r3, [pc, #252]	; (80024fc <HAL_RCC_ClockConfig+0x1bc>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d109      	bne.n	800241e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e06f      	b.n	80024ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800240e:	4b3b      	ldr	r3, [pc, #236]	; (80024fc <HAL_RCC_ClockConfig+0x1bc>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0302 	and.w	r3, r3, #2
 8002416:	2b00      	cmp	r3, #0
 8002418:	d101      	bne.n	800241e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e067      	b.n	80024ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800241e:	4b37      	ldr	r3, [pc, #220]	; (80024fc <HAL_RCC_ClockConfig+0x1bc>)
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	f023 0203 	bic.w	r2, r3, #3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	4934      	ldr	r1, [pc, #208]	; (80024fc <HAL_RCC_ClockConfig+0x1bc>)
 800242c:	4313      	orrs	r3, r2
 800242e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002430:	f7ff fa3e 	bl	80018b0 <HAL_GetTick>
 8002434:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002436:	e00a      	b.n	800244e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002438:	f7ff fa3a 	bl	80018b0 <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	f241 3288 	movw	r2, #5000	; 0x1388
 8002446:	4293      	cmp	r3, r2
 8002448:	d901      	bls.n	800244e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800244a:	2303      	movs	r3, #3
 800244c:	e04f      	b.n	80024ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800244e:	4b2b      	ldr	r3, [pc, #172]	; (80024fc <HAL_RCC_ClockConfig+0x1bc>)
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f003 020c 	and.w	r2, r3, #12
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	429a      	cmp	r2, r3
 800245e:	d1eb      	bne.n	8002438 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002460:	4b25      	ldr	r3, [pc, #148]	; (80024f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0307 	and.w	r3, r3, #7
 8002468:	683a      	ldr	r2, [r7, #0]
 800246a:	429a      	cmp	r2, r3
 800246c:	d20c      	bcs.n	8002488 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800246e:	4b22      	ldr	r3, [pc, #136]	; (80024f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002470:	683a      	ldr	r2, [r7, #0]
 8002472:	b2d2      	uxtb	r2, r2
 8002474:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002476:	4b20      	ldr	r3, [pc, #128]	; (80024f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0307 	and.w	r3, r3, #7
 800247e:	683a      	ldr	r2, [r7, #0]
 8002480:	429a      	cmp	r2, r3
 8002482:	d001      	beq.n	8002488 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e032      	b.n	80024ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0304 	and.w	r3, r3, #4
 8002490:	2b00      	cmp	r3, #0
 8002492:	d008      	beq.n	80024a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002494:	4b19      	ldr	r3, [pc, #100]	; (80024fc <HAL_RCC_ClockConfig+0x1bc>)
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	4916      	ldr	r1, [pc, #88]	; (80024fc <HAL_RCC_ClockConfig+0x1bc>)
 80024a2:	4313      	orrs	r3, r2
 80024a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0308 	and.w	r3, r3, #8
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d009      	beq.n	80024c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024b2:	4b12      	ldr	r3, [pc, #72]	; (80024fc <HAL_RCC_ClockConfig+0x1bc>)
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	691b      	ldr	r3, [r3, #16]
 80024be:	00db      	lsls	r3, r3, #3
 80024c0:	490e      	ldr	r1, [pc, #56]	; (80024fc <HAL_RCC_ClockConfig+0x1bc>)
 80024c2:	4313      	orrs	r3, r2
 80024c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024c6:	f000 f821 	bl	800250c <HAL_RCC_GetSysClockFreq>
 80024ca:	4602      	mov	r2, r0
 80024cc:	4b0b      	ldr	r3, [pc, #44]	; (80024fc <HAL_RCC_ClockConfig+0x1bc>)
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	091b      	lsrs	r3, r3, #4
 80024d2:	f003 030f 	and.w	r3, r3, #15
 80024d6:	490a      	ldr	r1, [pc, #40]	; (8002500 <HAL_RCC_ClockConfig+0x1c0>)
 80024d8:	5ccb      	ldrb	r3, [r1, r3]
 80024da:	fa22 f303 	lsr.w	r3, r2, r3
 80024de:	4a09      	ldr	r2, [pc, #36]	; (8002504 <HAL_RCC_ClockConfig+0x1c4>)
 80024e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80024e2:	4b09      	ldr	r3, [pc, #36]	; (8002508 <HAL_RCC_ClockConfig+0x1c8>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7ff f99e 	bl	8001828 <HAL_InitTick>

  return HAL_OK;
 80024ec:	2300      	movs	r3, #0
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3710      	adds	r7, #16
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	40023c00 	.word	0x40023c00
 80024fc:	40023800 	.word	0x40023800
 8002500:	08002d14 	.word	0x08002d14
 8002504:	20000004 	.word	0x20000004
 8002508:	20000008 	.word	0x20000008

0800250c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800250c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002510:	b090      	sub	sp, #64	; 0x40
 8002512:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002514:	2300      	movs	r3, #0
 8002516:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t pllvco = 0U;
 8002518:	2300      	movs	r3, #0
 800251a:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t pllp = 0U;
 800251c:	2300      	movs	r3, #0
 800251e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002520:	2300      	movs	r3, #0
 8002522:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002524:	4b59      	ldr	r3, [pc, #356]	; (800268c <HAL_RCC_GetSysClockFreq+0x180>)
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f003 030c 	and.w	r3, r3, #12
 800252c:	2b08      	cmp	r3, #8
 800252e:	d00d      	beq.n	800254c <HAL_RCC_GetSysClockFreq+0x40>
 8002530:	2b08      	cmp	r3, #8
 8002532:	f200 80a1 	bhi.w	8002678 <HAL_RCC_GetSysClockFreq+0x16c>
 8002536:	2b00      	cmp	r3, #0
 8002538:	d002      	beq.n	8002540 <HAL_RCC_GetSysClockFreq+0x34>
 800253a:	2b04      	cmp	r3, #4
 800253c:	d003      	beq.n	8002546 <HAL_RCC_GetSysClockFreq+0x3a>
 800253e:	e09b      	b.n	8002678 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002540:	4b53      	ldr	r3, [pc, #332]	; (8002690 <HAL_RCC_GetSysClockFreq+0x184>)
 8002542:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002544:	e09b      	b.n	800267e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002546:	4b53      	ldr	r3, [pc, #332]	; (8002694 <HAL_RCC_GetSysClockFreq+0x188>)
 8002548:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800254a:	e098      	b.n	800267e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800254c:	4b4f      	ldr	r3, [pc, #316]	; (800268c <HAL_RCC_GetSysClockFreq+0x180>)
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002554:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002556:	4b4d      	ldr	r3, [pc, #308]	; (800268c <HAL_RCC_GetSysClockFreq+0x180>)
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d028      	beq.n	80025b4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002562:	4b4a      	ldr	r3, [pc, #296]	; (800268c <HAL_RCC_GetSysClockFreq+0x180>)
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	099b      	lsrs	r3, r3, #6
 8002568:	2200      	movs	r2, #0
 800256a:	623b      	str	r3, [r7, #32]
 800256c:	627a      	str	r2, [r7, #36]	; 0x24
 800256e:	6a3b      	ldr	r3, [r7, #32]
 8002570:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002574:	2100      	movs	r1, #0
 8002576:	4b47      	ldr	r3, [pc, #284]	; (8002694 <HAL_RCC_GetSysClockFreq+0x188>)
 8002578:	fb03 f201 	mul.w	r2, r3, r1
 800257c:	2300      	movs	r3, #0
 800257e:	fb00 f303 	mul.w	r3, r0, r3
 8002582:	4413      	add	r3, r2
 8002584:	4a43      	ldr	r2, [pc, #268]	; (8002694 <HAL_RCC_GetSysClockFreq+0x188>)
 8002586:	fba0 1202 	umull	r1, r2, r0, r2
 800258a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800258c:	460a      	mov	r2, r1
 800258e:	62ba      	str	r2, [r7, #40]	; 0x28
 8002590:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002592:	4413      	add	r3, r2
 8002594:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002596:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002598:	2200      	movs	r2, #0
 800259a:	61bb      	str	r3, [r7, #24]
 800259c:	61fa      	str	r2, [r7, #28]
 800259e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80025a2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80025a6:	f7fd fe15 	bl	80001d4 <__aeabi_uldivmod>
 80025aa:	4602      	mov	r2, r0
 80025ac:	460b      	mov	r3, r1
 80025ae:	4613      	mov	r3, r2
 80025b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025b2:	e053      	b.n	800265c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025b4:	4b35      	ldr	r3, [pc, #212]	; (800268c <HAL_RCC_GetSysClockFreq+0x180>)
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	099b      	lsrs	r3, r3, #6
 80025ba:	2200      	movs	r2, #0
 80025bc:	613b      	str	r3, [r7, #16]
 80025be:	617a      	str	r2, [r7, #20]
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80025c6:	f04f 0b00 	mov.w	fp, #0
 80025ca:	4652      	mov	r2, sl
 80025cc:	465b      	mov	r3, fp
 80025ce:	f04f 0000 	mov.w	r0, #0
 80025d2:	f04f 0100 	mov.w	r1, #0
 80025d6:	0159      	lsls	r1, r3, #5
 80025d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025dc:	0150      	lsls	r0, r2, #5
 80025de:	4602      	mov	r2, r0
 80025e0:	460b      	mov	r3, r1
 80025e2:	ebb2 080a 	subs.w	r8, r2, sl
 80025e6:	eb63 090b 	sbc.w	r9, r3, fp
 80025ea:	f04f 0200 	mov.w	r2, #0
 80025ee:	f04f 0300 	mov.w	r3, #0
 80025f2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80025f6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80025fa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80025fe:	ebb2 0408 	subs.w	r4, r2, r8
 8002602:	eb63 0509 	sbc.w	r5, r3, r9
 8002606:	f04f 0200 	mov.w	r2, #0
 800260a:	f04f 0300 	mov.w	r3, #0
 800260e:	00eb      	lsls	r3, r5, #3
 8002610:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002614:	00e2      	lsls	r2, r4, #3
 8002616:	4614      	mov	r4, r2
 8002618:	461d      	mov	r5, r3
 800261a:	eb14 030a 	adds.w	r3, r4, sl
 800261e:	603b      	str	r3, [r7, #0]
 8002620:	eb45 030b 	adc.w	r3, r5, fp
 8002624:	607b      	str	r3, [r7, #4]
 8002626:	f04f 0200 	mov.w	r2, #0
 800262a:	f04f 0300 	mov.w	r3, #0
 800262e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002632:	4629      	mov	r1, r5
 8002634:	028b      	lsls	r3, r1, #10
 8002636:	4621      	mov	r1, r4
 8002638:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800263c:	4621      	mov	r1, r4
 800263e:	028a      	lsls	r2, r1, #10
 8002640:	4610      	mov	r0, r2
 8002642:	4619      	mov	r1, r3
 8002644:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002646:	2200      	movs	r2, #0
 8002648:	60bb      	str	r3, [r7, #8]
 800264a:	60fa      	str	r2, [r7, #12]
 800264c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002650:	f7fd fdc0 	bl	80001d4 <__aeabi_uldivmod>
 8002654:	4602      	mov	r2, r0
 8002656:	460b      	mov	r3, r1
 8002658:	4613      	mov	r3, r2
 800265a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800265c:	4b0b      	ldr	r3, [pc, #44]	; (800268c <HAL_RCC_GetSysClockFreq+0x180>)
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	0c1b      	lsrs	r3, r3, #16
 8002662:	f003 0303 	and.w	r3, r3, #3
 8002666:	3301      	adds	r3, #1
 8002668:	005b      	lsls	r3, r3, #1
 800266a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 800266c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800266e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002670:	fbb2 f3f3 	udiv	r3, r2, r3
 8002674:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002676:	e002      	b.n	800267e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002678:	4b05      	ldr	r3, [pc, #20]	; (8002690 <HAL_RCC_GetSysClockFreq+0x184>)
 800267a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800267c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800267e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002680:	4618      	mov	r0, r3
 8002682:	3740      	adds	r7, #64	; 0x40
 8002684:	46bd      	mov	sp, r7
 8002686:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800268a:	bf00      	nop
 800268c:	40023800 	.word	0x40023800
 8002690:	00f42400 	.word	0x00f42400
 8002694:	017d7840 	.word	0x017d7840

08002698 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d101      	bne.n	80026aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e041      	b.n	800272e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d106      	bne.n	80026c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2200      	movs	r2, #0
 80026ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f7ff f804 	bl	80016cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2202      	movs	r2, #2
 80026c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	3304      	adds	r3, #4
 80026d4:	4619      	mov	r1, r3
 80026d6:	4610      	mov	r0, r2
 80026d8:	f000 f950 	bl	800297c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2201      	movs	r2, #1
 80026e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2201      	movs	r2, #1
 80026e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2201      	movs	r2, #1
 80026f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2201      	movs	r2, #1
 80026f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2201      	movs	r2, #1
 8002700:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2201      	movs	r2, #1
 8002708:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2201      	movs	r2, #1
 8002710:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2201      	movs	r2, #1
 8002718:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2201      	movs	r2, #1
 8002720:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2201      	movs	r2, #1
 8002728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800272c:	2300      	movs	r3, #0
}
 800272e:	4618      	mov	r0, r3
 8002730:	3708      	adds	r7, #8
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
	...

08002738 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002738:	b480      	push	{r7}
 800273a:	b085      	sub	sp, #20
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002746:	b2db      	uxtb	r3, r3
 8002748:	2b01      	cmp	r3, #1
 800274a:	d001      	beq.n	8002750 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e03c      	b.n	80027ca <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2202      	movs	r2, #2
 8002754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a1e      	ldr	r2, [pc, #120]	; (80027d8 <HAL_TIM_Base_Start+0xa0>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d018      	beq.n	8002794 <HAL_TIM_Base_Start+0x5c>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800276a:	d013      	beq.n	8002794 <HAL_TIM_Base_Start+0x5c>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a1a      	ldr	r2, [pc, #104]	; (80027dc <HAL_TIM_Base_Start+0xa4>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d00e      	beq.n	8002794 <HAL_TIM_Base_Start+0x5c>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a19      	ldr	r2, [pc, #100]	; (80027e0 <HAL_TIM_Base_Start+0xa8>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d009      	beq.n	8002794 <HAL_TIM_Base_Start+0x5c>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a17      	ldr	r2, [pc, #92]	; (80027e4 <HAL_TIM_Base_Start+0xac>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d004      	beq.n	8002794 <HAL_TIM_Base_Start+0x5c>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a16      	ldr	r2, [pc, #88]	; (80027e8 <HAL_TIM_Base_Start+0xb0>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d111      	bne.n	80027b8 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	f003 0307 	and.w	r3, r3, #7
 800279e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2b06      	cmp	r3, #6
 80027a4:	d010      	beq.n	80027c8 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f042 0201 	orr.w	r2, r2, #1
 80027b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027b6:	e007      	b.n	80027c8 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f042 0201 	orr.w	r2, r2, #1
 80027c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3714      	adds	r7, #20
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop
 80027d8:	40010000 	.word	0x40010000
 80027dc:	40000400 	.word	0x40000400
 80027e0:	40000800 	.word	0x40000800
 80027e4:	40000c00 	.word	0x40000c00
 80027e8:	40014000 	.word	0x40014000

080027ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b084      	sub	sp, #16
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027f6:	2300      	movs	r3, #0
 80027f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002800:	2b01      	cmp	r3, #1
 8002802:	d101      	bne.n	8002808 <HAL_TIM_ConfigClockSource+0x1c>
 8002804:	2302      	movs	r3, #2
 8002806:	e0b4      	b.n	8002972 <HAL_TIM_ConfigClockSource+0x186>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2201      	movs	r2, #1
 800280c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2202      	movs	r2, #2
 8002814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002826:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800282e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	68ba      	ldr	r2, [r7, #8]
 8002836:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002840:	d03e      	beq.n	80028c0 <HAL_TIM_ConfigClockSource+0xd4>
 8002842:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002846:	f200 8087 	bhi.w	8002958 <HAL_TIM_ConfigClockSource+0x16c>
 800284a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800284e:	f000 8086 	beq.w	800295e <HAL_TIM_ConfigClockSource+0x172>
 8002852:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002856:	d87f      	bhi.n	8002958 <HAL_TIM_ConfigClockSource+0x16c>
 8002858:	2b70      	cmp	r3, #112	; 0x70
 800285a:	d01a      	beq.n	8002892 <HAL_TIM_ConfigClockSource+0xa6>
 800285c:	2b70      	cmp	r3, #112	; 0x70
 800285e:	d87b      	bhi.n	8002958 <HAL_TIM_ConfigClockSource+0x16c>
 8002860:	2b60      	cmp	r3, #96	; 0x60
 8002862:	d050      	beq.n	8002906 <HAL_TIM_ConfigClockSource+0x11a>
 8002864:	2b60      	cmp	r3, #96	; 0x60
 8002866:	d877      	bhi.n	8002958 <HAL_TIM_ConfigClockSource+0x16c>
 8002868:	2b50      	cmp	r3, #80	; 0x50
 800286a:	d03c      	beq.n	80028e6 <HAL_TIM_ConfigClockSource+0xfa>
 800286c:	2b50      	cmp	r3, #80	; 0x50
 800286e:	d873      	bhi.n	8002958 <HAL_TIM_ConfigClockSource+0x16c>
 8002870:	2b40      	cmp	r3, #64	; 0x40
 8002872:	d058      	beq.n	8002926 <HAL_TIM_ConfigClockSource+0x13a>
 8002874:	2b40      	cmp	r3, #64	; 0x40
 8002876:	d86f      	bhi.n	8002958 <HAL_TIM_ConfigClockSource+0x16c>
 8002878:	2b30      	cmp	r3, #48	; 0x30
 800287a:	d064      	beq.n	8002946 <HAL_TIM_ConfigClockSource+0x15a>
 800287c:	2b30      	cmp	r3, #48	; 0x30
 800287e:	d86b      	bhi.n	8002958 <HAL_TIM_ConfigClockSource+0x16c>
 8002880:	2b20      	cmp	r3, #32
 8002882:	d060      	beq.n	8002946 <HAL_TIM_ConfigClockSource+0x15a>
 8002884:	2b20      	cmp	r3, #32
 8002886:	d867      	bhi.n	8002958 <HAL_TIM_ConfigClockSource+0x16c>
 8002888:	2b00      	cmp	r3, #0
 800288a:	d05c      	beq.n	8002946 <HAL_TIM_ConfigClockSource+0x15a>
 800288c:	2b10      	cmp	r3, #16
 800288e:	d05a      	beq.n	8002946 <HAL_TIM_ConfigClockSource+0x15a>
 8002890:	e062      	b.n	8002958 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80028a2:	f000 f971 	bl	8002b88 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80028b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	68ba      	ldr	r2, [r7, #8]
 80028bc:	609a      	str	r2, [r3, #8]
      break;
 80028be:	e04f      	b.n	8002960 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80028d0:	f000 f95a 	bl	8002b88 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	689a      	ldr	r2, [r3, #8]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028e2:	609a      	str	r2, [r3, #8]
      break;
 80028e4:	e03c      	b.n	8002960 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028f2:	461a      	mov	r2, r3
 80028f4:	f000 f8ce 	bl	8002a94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	2150      	movs	r1, #80	; 0x50
 80028fe:	4618      	mov	r0, r3
 8002900:	f000 f927 	bl	8002b52 <TIM_ITRx_SetConfig>
      break;
 8002904:	e02c      	b.n	8002960 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002912:	461a      	mov	r2, r3
 8002914:	f000 f8ed 	bl	8002af2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2160      	movs	r1, #96	; 0x60
 800291e:	4618      	mov	r0, r3
 8002920:	f000 f917 	bl	8002b52 <TIM_ITRx_SetConfig>
      break;
 8002924:	e01c      	b.n	8002960 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002932:	461a      	mov	r2, r3
 8002934:	f000 f8ae 	bl	8002a94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2140      	movs	r1, #64	; 0x40
 800293e:	4618      	mov	r0, r3
 8002940:	f000 f907 	bl	8002b52 <TIM_ITRx_SetConfig>
      break;
 8002944:	e00c      	b.n	8002960 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4619      	mov	r1, r3
 8002950:	4610      	mov	r0, r2
 8002952:	f000 f8fe 	bl	8002b52 <TIM_ITRx_SetConfig>
      break;
 8002956:	e003      	b.n	8002960 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	73fb      	strb	r3, [r7, #15]
      break;
 800295c:	e000      	b.n	8002960 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800295e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2201      	movs	r2, #1
 8002964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2200      	movs	r2, #0
 800296c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002970:	7bfb      	ldrb	r3, [r7, #15]
}
 8002972:	4618      	mov	r0, r3
 8002974:	3710      	adds	r7, #16
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
	...

0800297c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800297c:	b480      	push	{r7}
 800297e:	b085      	sub	sp, #20
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	4a3a      	ldr	r2, [pc, #232]	; (8002a78 <TIM_Base_SetConfig+0xfc>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d00f      	beq.n	80029b4 <TIM_Base_SetConfig+0x38>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800299a:	d00b      	beq.n	80029b4 <TIM_Base_SetConfig+0x38>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	4a37      	ldr	r2, [pc, #220]	; (8002a7c <TIM_Base_SetConfig+0x100>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d007      	beq.n	80029b4 <TIM_Base_SetConfig+0x38>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	4a36      	ldr	r2, [pc, #216]	; (8002a80 <TIM_Base_SetConfig+0x104>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d003      	beq.n	80029b4 <TIM_Base_SetConfig+0x38>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	4a35      	ldr	r2, [pc, #212]	; (8002a84 <TIM_Base_SetConfig+0x108>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d108      	bne.n	80029c6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	68fa      	ldr	r2, [r7, #12]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4a2b      	ldr	r2, [pc, #172]	; (8002a78 <TIM_Base_SetConfig+0xfc>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d01b      	beq.n	8002a06 <TIM_Base_SetConfig+0x8a>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029d4:	d017      	beq.n	8002a06 <TIM_Base_SetConfig+0x8a>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4a28      	ldr	r2, [pc, #160]	; (8002a7c <TIM_Base_SetConfig+0x100>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d013      	beq.n	8002a06 <TIM_Base_SetConfig+0x8a>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a27      	ldr	r2, [pc, #156]	; (8002a80 <TIM_Base_SetConfig+0x104>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d00f      	beq.n	8002a06 <TIM_Base_SetConfig+0x8a>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a26      	ldr	r2, [pc, #152]	; (8002a84 <TIM_Base_SetConfig+0x108>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d00b      	beq.n	8002a06 <TIM_Base_SetConfig+0x8a>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a25      	ldr	r2, [pc, #148]	; (8002a88 <TIM_Base_SetConfig+0x10c>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d007      	beq.n	8002a06 <TIM_Base_SetConfig+0x8a>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4a24      	ldr	r2, [pc, #144]	; (8002a8c <TIM_Base_SetConfig+0x110>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d003      	beq.n	8002a06 <TIM_Base_SetConfig+0x8a>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a23      	ldr	r2, [pc, #140]	; (8002a90 <TIM_Base_SetConfig+0x114>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d108      	bne.n	8002a18 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	68fa      	ldr	r2, [r7, #12]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	695b      	ldr	r3, [r3, #20]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	68fa      	ldr	r2, [r7, #12]
 8002a2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	689a      	ldr	r2, [r3, #8]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	4a0e      	ldr	r2, [pc, #56]	; (8002a78 <TIM_Base_SetConfig+0xfc>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d103      	bne.n	8002a4c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	691a      	ldr	r2, [r3, #16]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	f003 0301 	and.w	r3, r3, #1
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d105      	bne.n	8002a6a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	691b      	ldr	r3, [r3, #16]
 8002a62:	f023 0201 	bic.w	r2, r3, #1
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	611a      	str	r2, [r3, #16]
  }
}
 8002a6a:	bf00      	nop
 8002a6c:	3714      	adds	r7, #20
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop
 8002a78:	40010000 	.word	0x40010000
 8002a7c:	40000400 	.word	0x40000400
 8002a80:	40000800 	.word	0x40000800
 8002a84:	40000c00 	.word	0x40000c00
 8002a88:	40014000 	.word	0x40014000
 8002a8c:	40014400 	.word	0x40014400
 8002a90:	40014800 	.word	0x40014800

08002a94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b087      	sub	sp, #28
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	60f8      	str	r0, [r7, #12]
 8002a9c:	60b9      	str	r1, [r7, #8]
 8002a9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	6a1b      	ldr	r3, [r3, #32]
 8002aa4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	6a1b      	ldr	r3, [r3, #32]
 8002aaa:	f023 0201 	bic.w	r2, r3, #1
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	699b      	ldr	r3, [r3, #24]
 8002ab6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002abe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	011b      	lsls	r3, r3, #4
 8002ac4:	693a      	ldr	r2, [r7, #16]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	f023 030a 	bic.w	r3, r3, #10
 8002ad0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002ad2:	697a      	ldr	r2, [r7, #20]
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	693a      	ldr	r2, [r7, #16]
 8002ade:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	697a      	ldr	r2, [r7, #20]
 8002ae4:	621a      	str	r2, [r3, #32]
}
 8002ae6:	bf00      	nop
 8002ae8:	371c      	adds	r7, #28
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr

08002af2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002af2:	b480      	push	{r7}
 8002af4:	b087      	sub	sp, #28
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	60f8      	str	r0, [r7, #12]
 8002afa:	60b9      	str	r1, [r7, #8]
 8002afc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	6a1b      	ldr	r3, [r3, #32]
 8002b02:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	6a1b      	ldr	r3, [r3, #32]
 8002b08:	f023 0210 	bic.w	r2, r3, #16
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	699b      	ldr	r3, [r3, #24]
 8002b14:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002b1c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	031b      	lsls	r3, r3, #12
 8002b22:	693a      	ldr	r2, [r7, #16]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002b2e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	011b      	lsls	r3, r3, #4
 8002b34:	697a      	ldr	r2, [r7, #20]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	693a      	ldr	r2, [r7, #16]
 8002b3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	697a      	ldr	r2, [r7, #20]
 8002b44:	621a      	str	r2, [r3, #32]
}
 8002b46:	bf00      	nop
 8002b48:	371c      	adds	r7, #28
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr

08002b52 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b52:	b480      	push	{r7}
 8002b54:	b085      	sub	sp, #20
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
 8002b5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b68:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b6a:	683a      	ldr	r2, [r7, #0]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	f043 0307 	orr.w	r3, r3, #7
 8002b74:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	68fa      	ldr	r2, [r7, #12]
 8002b7a:	609a      	str	r2, [r3, #8]
}
 8002b7c:	bf00      	nop
 8002b7e:	3714      	adds	r7, #20
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr

08002b88 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b087      	sub	sp, #28
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	60f8      	str	r0, [r7, #12]
 8002b90:	60b9      	str	r1, [r7, #8]
 8002b92:	607a      	str	r2, [r7, #4]
 8002b94:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ba2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	021a      	lsls	r2, r3, #8
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	431a      	orrs	r2, r3
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	697a      	ldr	r2, [r7, #20]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	697a      	ldr	r2, [r7, #20]
 8002bba:	609a      	str	r2, [r3, #8]
}
 8002bbc:	bf00      	nop
 8002bbe:	371c      	adds	r7, #28
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr

08002bc8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b085      	sub	sp, #20
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d101      	bne.n	8002be0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002bdc:	2302      	movs	r3, #2
 8002bde:	e050      	b.n	8002c82 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2201      	movs	r2, #1
 8002be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2202      	movs	r2, #2
 8002bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	68fa      	ldr	r2, [r7, #12]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	68fa      	ldr	r2, [r7, #12]
 8002c18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a1c      	ldr	r2, [pc, #112]	; (8002c90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d018      	beq.n	8002c56 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c2c:	d013      	beq.n	8002c56 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a18      	ldr	r2, [pc, #96]	; (8002c94 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d00e      	beq.n	8002c56 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a16      	ldr	r2, [pc, #88]	; (8002c98 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d009      	beq.n	8002c56 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a15      	ldr	r2, [pc, #84]	; (8002c9c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d004      	beq.n	8002c56 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a13      	ldr	r2, [pc, #76]	; (8002ca0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d10c      	bne.n	8002c70 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c5c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	68ba      	ldr	r2, [r7, #8]
 8002c64:	4313      	orrs	r3, r2
 8002c66:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	68ba      	ldr	r2, [r7, #8]
 8002c6e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c80:	2300      	movs	r3, #0
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3714      	adds	r7, #20
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr
 8002c8e:	bf00      	nop
 8002c90:	40010000 	.word	0x40010000
 8002c94:	40000400 	.word	0x40000400
 8002c98:	40000800 	.word	0x40000800
 8002c9c:	40000c00 	.word	0x40000c00
 8002ca0:	40014000 	.word	0x40014000

08002ca4 <memset>:
 8002ca4:	4402      	add	r2, r0
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d100      	bne.n	8002cae <memset+0xa>
 8002cac:	4770      	bx	lr
 8002cae:	f803 1b01 	strb.w	r1, [r3], #1
 8002cb2:	e7f9      	b.n	8002ca8 <memset+0x4>

08002cb4 <__libc_init_array>:
 8002cb4:	b570      	push	{r4, r5, r6, lr}
 8002cb6:	4d0d      	ldr	r5, [pc, #52]	; (8002cec <__libc_init_array+0x38>)
 8002cb8:	4c0d      	ldr	r4, [pc, #52]	; (8002cf0 <__libc_init_array+0x3c>)
 8002cba:	1b64      	subs	r4, r4, r5
 8002cbc:	10a4      	asrs	r4, r4, #2
 8002cbe:	2600      	movs	r6, #0
 8002cc0:	42a6      	cmp	r6, r4
 8002cc2:	d109      	bne.n	8002cd8 <__libc_init_array+0x24>
 8002cc4:	4d0b      	ldr	r5, [pc, #44]	; (8002cf4 <__libc_init_array+0x40>)
 8002cc6:	4c0c      	ldr	r4, [pc, #48]	; (8002cf8 <__libc_init_array+0x44>)
 8002cc8:	f000 f818 	bl	8002cfc <_init>
 8002ccc:	1b64      	subs	r4, r4, r5
 8002cce:	10a4      	asrs	r4, r4, #2
 8002cd0:	2600      	movs	r6, #0
 8002cd2:	42a6      	cmp	r6, r4
 8002cd4:	d105      	bne.n	8002ce2 <__libc_init_array+0x2e>
 8002cd6:	bd70      	pop	{r4, r5, r6, pc}
 8002cd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cdc:	4798      	blx	r3
 8002cde:	3601      	adds	r6, #1
 8002ce0:	e7ee      	b.n	8002cc0 <__libc_init_array+0xc>
 8002ce2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ce6:	4798      	blx	r3
 8002ce8:	3601      	adds	r6, #1
 8002cea:	e7f2      	b.n	8002cd2 <__libc_init_array+0x1e>
 8002cec:	08002d2c 	.word	0x08002d2c
 8002cf0:	08002d2c 	.word	0x08002d2c
 8002cf4:	08002d2c 	.word	0x08002d2c
 8002cf8:	08002d30 	.word	0x08002d30

08002cfc <_init>:
 8002cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cfe:	bf00      	nop
 8002d00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d02:	bc08      	pop	{r3}
 8002d04:	469e      	mov	lr, r3
 8002d06:	4770      	bx	lr

08002d08 <_fini>:
 8002d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d0a:	bf00      	nop
 8002d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d0e:	bc08      	pop	{r3}
 8002d10:	469e      	mov	lr, r3
 8002d12:	4770      	bx	lr
